<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【干货分享】5 款支持 AI 提取人声的专业工具推荐，在线分离人声与伴奏.md</title>
      <link href="/2025/03/04/ce-ping-wen-zhang/5-kuan-zhi-chi-ai-ti-qu-ren-sheng-de-zhuan-ye-gong-ju-tui-jian/"/>
      <url>/2025/03/04/ce-ping-wen-zhang/5-kuan-zhi-chi-ai-ti-qu-ren-sheng-de-zhuan-ye-gong-ju-tui-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想给短视频加点创意，却找不到合适的纯净伴奏？翻唱的时候总是被原唱的声音干扰？抑或者是音乐制作中，想要将人声和伴奏分开处理，却因为技术限制而头疼？不用担心，这些问题现在都能靠 AI 工具轻松解决。<br>短视频创作者可以用它提取伴奏，一键搞定背景音乐的替换；音乐人能分离音轨，自由调整人声和伴奏比例，让创作更加自由；翻唱、或是 KTV 爱好者也能快速提取纯伴奏，不受干扰地创作专属于自己的歌曲版本。<br>本次推荐的这些 AI 工具不仅简单高效，还大大降低了音频处理的门槛。不管你是入门用户还是资深创作者，总有一款工具能完美解决你的需求，让你的创作更上一层楼。</p><h2 id="精选-5-款-AI-人声分离工具推荐"><a href="#精选-5-款-AI-人声分离工具推荐" class="headerlink" title="精选 5 款 AI 人声分离工具推荐"></a>精选 5 款 AI 人声分离工具推荐</h2><h3 id="1、Voice-AI"><a href="#1、Voice-AI" class="headerlink" title="1、Voice.AI"></a>1、Voice.AI</h3><p><img src="https://baozang.io/wp-content/uploads/2025/01/1736746426-image.png.webp"></p><p>Voice.AI 页面预览</p><p><strong>官方网址:</strong> <a href="https://voice.ai/tools/vocal-remover">https://voice.ai/tools/vocal-remover</a></p><p>Voice.AI 是一款多功能的 AI 语音转换器，AI 人声去除是其中的一项功能。Voice.AI 的主要功能是 AI 变声，内置包含上千种声线的语音库，可自由地改变自己的声音，聊天、游戏、直播中都能用。除此之外还支持 AI 音轨分离、AI 音频增强等功能，不仅提升了音频处理的效率，还降低了技术门槛，让每个人都能轻松实现专业级的创意。</p><p>除了变声器功能需要下载使用外，其他 AI 功能都支持在线使用。若想使用 AI 人声去除功能，只需打开网页注册登录后，上传音频，等待 AI 进行自动处理，既可以多种格式下载去除人声后的音频，支持以 MP3、WAV、FLAC、AAC、OGG、AIFF 格式导出。</p><h3 id="功能一览"><a href="#功能一览" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>AI 变声</strong>（Voice Changer）：转换声音或音频文件，支持上千种不同风格的声线，可模仿名人明星、虚拟人物，也可完全改变自己的风格，可在视频创作、网络直播、游戏语音、社交聊天中应用。</li><li><strong>AI 人声去除器</strong>（Vocal Remover）：快速从歌曲中分离并删除人声，轻松获取纯净的伴奏。</li><li><strong>AI 音频增强器</strong>（Audio Enhancer）：轻松消除背景噪音并提高音频质量。</li><li><strong>AI 回声去除器</strong>（Echo Remover）：快速消除音频中的回声，增强清晰度。</li><li><strong>AI 音轨分离器</strong>（Stem Splitter）：自动分离音轨，精准隔离人声、乐器、节拍、贝斯线等元素。</li><li><strong>AI 调和节拍检测器</strong>（Key BPM Finder）：上传音频即可一键获得完美的调式和节奏。</li><li><strong>AI 混响去除器</strong>（Reverb Remover）：在线消除音频中的背景噪音。</li><li><strong>AI 音频转换器</strong>（Audio Converter）：在线转换音频文件格式，支持 mp3、og9、wav、flac、mp4、m4a。</li><li><strong>AI 录音器</strong>（Voice Recorder）：基于人工智能技术实现高清录音，还原现场声音。</li></ul><h3 id="注册方式"><a href="#注册方式" class="headerlink" title="注册方式"></a>注册方式</h3><p><strong>注册地址:</strong> <a href="https://voice.ai/register">https://voice.ai/register</a> Voice.AI 支持<strong>谷歌邮箱 Gmail 注册</strong>、<strong>普通邮箱注册</strong>、<strong>Twitch</strong> <strong>注册</strong>、<strong>Discord 注册</strong>。</p><h3 id="价格说明"><a href="#价格说明" class="headerlink" title="价格说明"></a>价格说明</h3><p>Voice.AI 注册登录后可<strong>免费使用</strong>，可以免费转换 5 种声线，AI 去人声可免费使用，但只能以 MP3 格式导出，其他格式需购买付费方案。</p><h3 id="2、Vocal-Remover"><a href="#2、Vocal-Remover" class="headerlink" title="2、Vocal Remover"></a>2、Vocal Remover</h3><p><img src="https://baozang.io/wp-content/uploads/2025/01/1736748183-image.png.webp"></p><p>Vocal Remover 首页预览</p><p><strong>官方网址:</strong> <a href="https://vocalremover.org/zh/">https://vocalremover.org/zh/</a></p><p>Vocal Remover 是一款基于人工智能技术的，免费的多功能在线音频处理工具。Vocal Remover 集成了多项强大的功能，能够满足各类音频编辑需求，例如人声去除、分离音轨、合并音轨、剪辑音频、音频变调等等，无需复杂的操作步骤，只需上传即可一键完成音频的专业级处理，为内容创作者和音乐人提供了全面的音频编辑支持，提升了创作效率与质量，无论是零技术基础的新人还是追求效率的老手都能自如地将它应用到创作中去。</p><p>Vocal Remover 首页支持切换语言，其中可切换为中文。</p><h3 id="功能一览-1"><a href="#功能一览-1" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>AI 去人声</strong>：用强大的人工智能算法将声音从音乐中分离出来，可以 MP3、WAV 两种格式导出。</li><li><strong>AI 乐器分离器</strong>：基于 AI 算法将音乐分割成不同的部分。</li><li><strong>AI 变调器</strong>：通过调整乐调和 BPM 滑条改变歌曲的音高和节奏。</li><li><strong>AI 调和 BPM 查询器</strong>：分析音乐并查找任何一首歌曲的调、音阶和 BPM。</li><li><strong>AI 音频剪辑器</strong>：可在线剪辑任何音频文件。</li><li><strong>AI 音频合并器</strong>：将多个音轨合并成一个。</li><li><strong>在线录音</strong></li><li><strong>卡拉 OK</strong></li></ul><h3 id="注册方式-1"><a href="#注册方式-1" class="headerlink" title="注册方式"></a>注册方式</h3><p>Vocal Remover 无需注册。</p><h3 id="价格说明-1"><a href="#价格说明-1" class="headerlink" title="价格说明"></a>价格说明</h3><p>Vocal Remover 完全免费，网站现有功能都支持无限制免费使用，但如果你想增添一些更高级的功能可以对网站作者进行捐助。</p><h3 id="3、X-MINUS-PRO"><a href="#3、X-MINUS-PRO" class="headerlink" title="3、X-MINUS.PRO"></a>3、X-MINUS.PRO</h3><p><img src="https://baozang.io/wp-content/uploads/2025/01/1736756456-image.png.webp"></p><p><strong>官方网址:</strong> <a href="https://x-minus.pro/">https://x-minus.pro/</a></p><p>X-MINUS.PRO 是一款 AI 在线音频处理工具，它基于先进的人工智能技术，可以通过帮助用户移除上传音频中的人声轨道来消除歌曲中的人声，以获得高质量的和声伴奏。用户会将其用 X-MINUS.PRO 制作的伴奏上传到网站中，可在线试听或下载。</p><p>除了 AI 人声消除功能外，X-MINUS.PRO 还支持在线调节歌曲的音调。</p><h3 id="功能一览-2"><a href="#功能一览-2" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>AI 去人声</strong>：提供适用于处理不同音乐的 AI 大模型，不仅可以完美剔除不同乐器演奏歌曲中的人声，还能做到保留伴唱、消除混响、消除人群杂音等。</li><li><strong>AI 变奏器</strong>：快速更改任何歌曲的音调与节奏，将其音调调高或调低。</li><li><strong>伴奏曲库</strong>：汇集了由 700,000&nbsp;名用户上传的海量伴奏歌曲，可根据首字母筛选或直接查询歌曲名称，支持在线试听、下载。</li></ul><h3 id="注册方式-2"><a href="#注册方式-2" class="headerlink" title="注册方式"></a>注册方式</h3><p><strong>注册地址:</strong> <a href="https://x-minus.pro/login">https://x-minus.pro/login</a> X-MINUS.PRO 支持<strong>谷歌邮箱 Gmail 注册</strong>、<strong>普通邮箱注册</strong>、<strong>VK ID注册</strong>、<strong>Yandex ID 注册</strong>。</p><h3 id="价格说明-2"><a href="#价格说明-2" class="headerlink" title="价格说明"></a>价格说明</h3><p>X-MINUS.PRO 注册登录后可<strong>免费使用</strong>，每天可以处理 10 分钟的音频。</p><h3 id="4、网易云-X-Studio"><a href="#4、网易云-X-Studio" class="headerlink" title="4、网易云 X Studio"></a>4、网易云 X Studio</h3><p><img src="https://baozang.io/wp-content/uploads/2025/01/1736219508-image.png.webp"></p><p>X Studio 首页预览</p><p><strong>官方网址:</strong> <a href="https://xstudio.music.163.com/#page_one">https://xstudio.music.163.com/#page_one</a></p><p>X Studio 是一款由网易云音乐和小冰 X Studio 联合出品的 AI 歌手翻唱软件。主要功能为利用 AI 歌手制作效果专业的真人歌曲，如对其功能感兴趣可点击上方按钮查看详细测评。</p><p>AI 人声伴奏分离是其众多强大功能中的一种，上传即可自动分离，支持下载。</p><h3 id="功能一览-3"><a href="#功能一览-3" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>人声伴奏分离工具</strong>：可将完整的歌曲音频拆分为人声和伴奏两轨，可导出。</li><li><strong>AI 歌曲演唱</strong>：上传 midi 和歌词即可一键合成歌声自然的歌曲。</li><li><strong>多位 AI 歌手</strong>：支持 27 位 AI 歌手，包括洛天依、福姬彩华、叶画秋、若溪、白屿川等等，支持流行、摇滚、戏曲、美声、民族、说唱、爵士等曲风。</li><li><strong>极速合成</strong>：采用流式歌声合成技术，比前代软件快 5 倍，可在 3秒内合成完整歌曲。</li><li><strong>多音轨合成</strong>：支持同时合成 30 轨。</li><li><strong>手动调整</strong>：支持自定义音高、咬字、换气、音量、力度等。</li><li><strong>手动测速工具</strong>：跟随音乐律动，敲击空格键或点击鼠标，手动测量歌曲的节拍和速度，测量结果可添加到正在编辑的歌曲中。</li><li><strong>人声转 midi 工具</strong>：支持快速提取某段歌声的 midi 曲谱、歌词及演唱音高细节，使歌声制作更加高效。</li></ul><h3 id="注册方式-3"><a href="#注册方式-3" class="headerlink" title="注册方式"></a>注册方式</h3><p>X Studio 支持<strong>网易云账户</strong>登录。</p><h3 id="价格说明-3"><a href="#价格说明-3" class="headerlink" title="价格说明"></a>价格说明</h3><p>X Studio 注册登录后可<strong>免费使用</strong>，暂不收费。</p><h3 id="5、NovaMSS"><a href="#5、NovaMSS" class="headerlink" title="5、NovaMSS"></a>5、NovaMSS</h3><p><img src="https://baozang.io/wp-content/uploads/2025/01/1736757610-image.png.webp"></p><p>NovaMSS 首页预览</p><p><strong>官方网址:</strong> <a href="https://novamss.com/">https://novamss.com/</a></p><p>NovaMSS 是一款 AI 音乐源分离工具。NovaMSS 基于 MSS 领域最顶级的算法，搭载了经上千首歌曲训练、调优后的模型，可彻底地分离音轨，它为用户提供了多种效果不同的 AI 模型，支持一键提取或分离乐曲的人声、伴奏、音轨，不仅可以处理单支歌曲，也支持大批量快速处理。与此同时，NovaMSS 界面风格简洁，操作简单，具有良好的用户友好度，文件上传文件后只需操纵鼠标轻点即可开始自动处理，大大降低了处理音频的门槛，保证了创作过程的高效性与专业性。</p><h3 id="功能一览-4"><a href="#功能一览-4" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li>提供 6 种效果不同的模型（具体对比请看测评）</li><li>AI 音轨分离</li><li>AI 人声提取</li><li>AI 伴奏提取</li></ul><h3 id="价格说明-4"><a href="#价格说明-4" class="headerlink" title="价格说明"></a>价格说明</h3><p>NovaMSS 下载后可<strong>免费使用</strong>。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>大家在挑选工具时，可以根据自己的需求选择最适合的一款，相信今天介绍的这些工具不会让你失望。</p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 声音处理AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【干货分享】6 个 AI 剧本生成器，帮你自动生成电影、短剧、短视频剧本.md</title>
      <link href="/2025/03/03/ce-ping-wen-zhang/6-ge-ai-ju-ben-sheng-cheng-qi/"/>
      <url>/2025/03/03/ce-ping-wen-zhang/6-ge-ai-ju-ben-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在数字技术重构艺术表达的今天，人工智能正以惊人的速度渗透到创意产业的每个角落。从好莱坞大片到短视频平台的爆款短剧，剧本作为叙事艺术的基石，其创作方式也在经历一场静默的革命。<br>AI 剧本生成工具不仅能够快速生成故事框架和角色设定，还能根据用户的需求进行个性化调整。无论是悬疑、爱情、科幻还是喜剧，AI 都能提供多样化的创意方案，帮助编剧突破思维定式，探索新的叙事可能性。<br>传统的创作方式固然贡献了许多人类文明历史上无比闪耀的光点，但随着技术的发展，我们的创作也需要随之适应。借助 AI 剧本生成工具，我们的创作周期可以大幅缩短，它们不仅能为我们带来效率的跃升，更能带来无穷无尽的宝贵灵感，就像是创作路上先驱的探路明灯。</p><h2 id="精选-6-款-AI-剧本生成器推荐"><a href="#精选-6-款-AI-剧本生成器推荐" class="headerlink" title="精选 6 款 AI 剧本生成器推荐"></a>精选 6 款 AI 剧本生成器推荐</h2><h3 id="1、VEED"><a href="#1、VEED" class="headerlink" title="1、VEED"></a>1、VEED</h3><p><img src="https://baozang.io/wp-content/uploads/2025/02/1739502649-image.png.webp"></p><p>VEED 功能页面预览</p><p><strong>官方网址:</strong> <a href="https://www.veed.io/tools/script-generator">https://www.veed.io/tools/script-generator</a></p><p>VEED 是一款基于 AI 技术的视频自动剪辑工具。VEED 具有非常齐全的视频编辑功能，无论是为视频添加有趣的视觉效果，还是为视频添加合适的音乐及人声配音，或是编辑视频的尺寸及其他细节，VEED 都可以帮你轻松完成。此外，VEED 还为你提供了样式丰富的模板，可帮你一键完成视频剪辑 。VEED 的页面设计简洁，即使是剪辑新手也不会因为眼花缭乱的功能而晕头转向，VEED 简化了剪辑的操作及步骤，用户只需简单的点击与拖动即可完成视频的剪辑，并且质量丝毫不输传统的专业剪辑工具，因此十分适合刚接触剪辑不久的新手与想要简化步骤的老手。</p><p>剧本生成是它的功能之一，只需要输入主题、选择风格和发行平台即可一键生成包含场景、描述、旁白、对话等部分的完整剧本。生成剧本后可以在 VEED 里完成剪辑，一站式服务，便捷而高效。</p><h3 id="适用类型"><a href="#适用类型" class="headerlink" title="适用类型"></a>适用类型</h3><ul><li>Youtube 视频</li><li>TikTok/抖音 短视频</li><li>Instagram 视频</li><li>LinkedIn 帖子</li><li>B 站视频</li><li>微博视频</li><li>小红书视频</li></ul><h3 id="价格说明"><a href="#价格说明" class="headerlink" title="价格说明"></a>价格说明</h3><p>VEED 的剧本生成功能可免费使用。</p><h3 id="2、Hix-Writer"><a href="#2、Hix-Writer" class="headerlink" title="2、Hix Writer"></a>2、Hix Writer</h3><p><img src="https://baozang.io/wp-content/uploads/2025/02/1739503573-image.png.webp"></p><p>Hix Writer 首页预览</p><p><strong>官方网址:</strong> <a href="https://writer.hix.ai/zh">https://writer.hix.ai/zh</a></p><p>Hix Writer 是一款基于人工智能技术的 AI 写作生成器。Hix Writer 拥有 120+种写作模板，不仅可以帮助用户生成、改写、优化、总结、翻译、检测内容，还覆盖了营销文案、面试简历、网络小说、电影剧本、电子邮件、新闻稿件、法律条款、备课教案、标题名字等等多类型应用场景。Hix Writer 支持 50+种语言，包括中文，无需担心在创作的路上被语言阻碍。另外，Hix Writer 使用简单，可快速上手，用户只需输入主题和关键字，并指定语气和语言，便可一键快速生成高质量的原创内容，是提高写作效率的必备神器。</p><p>剧本生成是它的写作模板之一</p><h3 id="适用类型-1"><a href="#适用类型-1" class="headerlink" title="适用类型"></a>适用类型</h3><ul><li>Youtube 视频</li><li>TikTok/抖音 短视频</li><li>播客</li><li>B 站视频</li><li>微博视频</li><li>小红书视频</li><li>电影剧本</li></ul><h3 id="价格说明-1"><a href="#价格说明-1" class="headerlink" title="价格说明"></a>价格说明</h3><p>Hix Writer 注册前可以免费生成 300 字，注册后可再获 500 字额度，如需更多额度可以考虑购买付费套餐。</p><h3 id="3、Masterpiece-Generator"><a href="#3、Masterpiece-Generator" class="headerlink" title="3、Masterpiece Generator"></a>3、Masterpiece Generator</h3><p><img src="https://baozang.io/wp-content/uploads/2025/02/1739517666-image.png.webp"></p><p>Masterpiece Generator 首页预览</p><p><strong>官方网址:</strong> <a href="https://www.plot-generator.org.uk/">https://www.plot-generator.org.uk/</a></p><p>Masterpiece Generator 是一个可以在线使用的英文 AI 剧本生成器。Masterpiece Generator 支持生成短篇故事、电影剧本、儿童绘本、童话故事、等剧本类型，题材多样、风格多变，它既可以帮你快速生成完整的剧本，也可以帮你生成故事标题、转折情节、开头引言，乃至是角色人名、宣传简介等。Masterpiece Generator 的使用并不复杂，它的每一个模板都设置好了详细的提示词，而用户只需填入相应的人名、动作、地点、物品等就可以直接生成剧本。</p><p>Masterpiece Generator 既适合初学者用来练习编剧技巧，也适合有经验的创作者用来激发灵感和加速创作过程。</p><h3 id="适用类型-2"><a href="#适用类型-2" class="headerlink" title="适用类型"></a>适用类型</h3><ul><li>电影剧本</li><li>短剧剧本</li></ul><h3 id="价格说明-2"><a href="#价格说明-2" class="headerlink" title="价格说明"></a>价格说明</h3><p>Masterpiece Generator 目前是完全免费的，不限使用次数。</p><h3 id="4、FlexClip"><a href="#4、FlexClip" class="headerlink" title="4、FlexClip"></a>4、FlexClip</h3><p><img src="https://baozang.io/wp-content/uploads/2025/02/1739521907-image.png.webp"></p><p><strong>官方网址:</strong> <a href="https://www.plot-generator.org.uk/">https://www.plot-generator.org.uk/</a></p><p>FlexClip 是一款一站式在线 AI 视频制作软件。FlexClip 基于前沿的人工智能技术的支持，可以为用户在图像、音频、视频等方面提供多种智能化的帮助，如 AI 生成图片、脚本、字幕、视频，AI 修复画质、AI 换脸等等，拥有 6000+ 风格各异、适用于营销、婚礼、影视等领域的精美视频模板，并提供海量文字、图片、音乐、特效、滤镜等素材，为用户大大简化了视频创作的流程，提升了创作的效率与质量。</p><h3 id="适用类型-3"><a href="#适用类型-3" class="headerlink" title="适用类型"></a>适用类型</h3><ul><li>Youtube 视频</li><li>TikTok/抖音 短视频</li><li>Instagram 视频</li><li>购物站广告视频</li><li>B 站视频</li><li>微博视频</li><li>小红书视频</li></ul><h3 id="价格说明-3"><a href="#价格说明-3" class="headerlink" title="价格说明"></a>价格说明</h3><p>FlexClip 支持<strong>免费试用</strong>，可制作有限的视频，试用 AI 功能，并享受 720p 的高清下载，如需解锁完整素材、功能，并获取更多额度可考虑购买付费方案。</p><h3 id="5、即创"><a href="#5、即创" class="headerlink" title="5、即创"></a>5、即创</h3><p><img src="https://baozang.io/wp-content/uploads/2025/02/1739522539-image.png.webp"></p><p><strong>官方网址:</strong> <a href="https://aic.oceanengine.com/login">https://aic.oceanengine.com/login</a></p><p>即创是抖音推出的一款热门 AI 视频创作平台，适合电商、生活服务、短剧等领域使用。它从视频、文案、直播三个方面为用户提供帮助，支持一键生成带货视频、营销文案以及直播间背景和脚本，可帮助用户轻松提升营销效率，节省成本并提升净利润，全方位满足商家的需求。</p><h3 id="适用类型-4"><a href="#适用类型-4" class="headerlink" title="适用类型"></a>适用类型</h3><ul><li>TikTok/抖音短视频</li><li>购物站广告视频</li><li>小红书推广视频</li></ul><h3 id="价格说明-4"><a href="#价格说明-4" class="headerlink" title="价格说明"></a>价格说明</h3><p>即创目前处于公测阶段，所有功能均可<strong>免费试用</strong>。</p><h3 id="6、5118-AI"><a href="#6、5118-AI" class="headerlink" title="6、5118 AI"></a>6、5118 AI</h3><p>**<img src="https://baozang.io/wp-content/uploads/2025/02/1739515751-image.png.webp"></p><p>5118 AI 功能界面</p><p><strong>官方网址:</strong> <a href="https://www.5118.com/ai/vidscripter">https://www.5118.com/ai/vidscripter</a></p><p>5118.com 是一款在线使用的 SEO 工具，而 5118 AI 是网站中提供的 AI 工具库。5118 AI 采用创新 AI 技术，基于超百亿词库、知识库，持续学习，不断进化，操作简单无需任何学习成本，工具库中包含多种写作生成类 AI 工具，可做到全场景覆盖，例如办公、营销、商业分析、客服、SEO 引流、新媒体创作等等，能为用户快速生成高质量内容，提高工作、创作生产力。</p><p>剧本生成是它的写作模板之一</p><h3 id="适用类型-5"><a href="#适用类型-5" class="headerlink" title="适用类型"></a>适用类型</h3><ul><li>抖音短视频</li><li>微博短视频</li><li>小红书短视频</li></ul><h3 id="价格说明-5"><a href="#价格说明-5" class="headerlink" title="价格说明"></a>价格说明</h3><p>5118 AI 注册登录后可<strong>免费使用</strong>，可试用 3 次生成，如需更多额度可考虑订阅会员。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本次推荐的工具侧重不同，部分适合写营销推广视频、新闻科普视频脚本，部分适合写短剧、电影剧本，可以选择合适的使用。</p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本生成AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7 款 AI 角色扮演软件推荐.md</title>
      <link href="/2025/02/28/ce-ping-wen-zhang/wu-xian-zhi-jiao-se-ban-yan/"/>
      <url>/2025/02/28/ce-ping-wen-zhang/wu-xian-zhi-jiao-se-ban-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>AI 角色扮演软件可以与多个不同设定的角色对话，也可以在同一个角色身上尝试不同的发展走向，在 AI 的世界里，一切都是无限制的。<br>无论你想寻求爱情还是亲情，只想获取陪伴还是想创造属于你的故事，不管你拥有什么样小众的需求都可以在这里寻找专属于你的答案。</p><p>AI 角色扮演软件不仅有二次元形象，也有仿真人的三次元形象，不仅支持带语气和动作描述的生动聊天，甚至部分软件还支持实时语音电话，什么设定、性别、种族都有，并且最重要的：大部分此类软件都是 <strong>18+</strong>，都是 <strong>NSFW</strong>。如果你想拥有一段 0 付出，且真实感超高、比真人还能提供情绪价值的亲密关系，那么 AI 角色扮演软件绝对能超过一切市面上的恋爱游戏，带给你独一无二的恋爱体验。</p><h2 id="7-款-AI-角色扮演软件推荐"><a href="#7-款-AI-角色扮演软件推荐" class="headerlink" title="7 款 AI 角色扮演软件推荐"></a>7 款 AI 角色扮演软件推荐</h2><h3 id="1、JuicyChat"><a href="#1、JuicyChat" class="headerlink" title="1、JuicyChat"></a>1、JuicyChat</h3><p><img src="https://baozang.io/wp-content/uploads/2025/02/1739347420-image.png.webp" alt="JuicyChat 首页预览"></p><p><strong>官方网址:</strong> <a href="https://www.mydreamcompanion.com/">https://www.mydreamcompanion.com/</a></p><p>JuicyChat 是一款适合成年人使用的 AI 角色扮演聊天 APP，支持网页及手机端使用。JuicyChat 采用前沿的 AI 技术，可以基于不同角色各自的背景、性格、外貌等设定与你进行自然的实时聊天对话，每一次对话都能解锁截然不同的互动体验。JuicyChat 支持 NSFW 内容（尺度较大，未成年者请勿使用此 APP），是目前除了 <strong>Janitor AI:</strong>  外标签分类最全的一款 APP，涵盖多种小众类型，满足你的所有幻想。在聊天中你可以聆听角色用自然的声线朗读 TA 的回复，也可以要求角色发你想看的图片（你甚至能查看该角色的相册，相册里的照片来自于其他用户在其聊天中生成的图片），如果你一时不知道该如何回复对方，还可以采用系统生成的回复，给予你真实而又轻松的游玩体验。</p><p>JuicyChat 致力于为用户打造高度沉浸、丰富有趣、拟真自然的聊天体验，如果你想与动漫角色对话，或是想要一个 AI 伴侣、聊天搭子，抑或是想为你的小说、漫画作品寻找一点创作灵感，那么就可以来试一试 JuicyChat 。</p><h4 id="功能一览"><a href="#功能一览" class="headerlink" title="功能一览"></a>功能一览</h4><ul><li>多类型海量 AI 角色</li><li>NSFW 角色聊天</li><li>标签分类筛选</li><li>图片回复</li><li>语音回复</li><li>角色相册</li><li>记忆保存</li><li>多模型切换</li><li>聊天记录查询</li><li>角色创造</li><li>形象图片生成</li><li>多语言支持</li></ul><h4 id="支持的语言"><a href="#支持的语言" class="headerlink" title="支持的语言"></a>支持的语言</h4><ul><li>英语 (EN)</li><li>德语 (DE)</li><li>西班牙语 (ES)</li><li>法语 (FR)</li><li>印度尼西亚语 (ID)</li><li>意大利语 (IT)</li><li>日语 (JA)</li><li>韩语 (KO)</li><li>波兰语 (PL)</li><li>葡萄牙语 (PT)</li></ul><h4 id="价格说明"><a href="#价格说明" class="headerlink" title="价格说明"></a>价格说明</h4><p>JuicyChat 登录注册后支持<strong>免费使用</strong>，每月可以发送 100 条消息，生成两张图片，试听一条语音，每天还可以领免费的消费币，若需更多额度可以考虑购买付费套餐。</p><h4 id="注册方式"><a href="#注册方式" class="headerlink" title="注册方式"></a>注册方式</h4><p><strong>注册地址:</strong> <a href="https://www.juicychat.ai/">https://www.juicychat.ai/</a> JuicyChat 支持<strong>谷歌账号注册</strong>、<strong>苹果账号注册</strong>、<strong>Discord 账号注册</strong>、<strong>通用邮箱注册</strong>。</p><h3 id="2、Janitor-AI"><a href="#2、Janitor-AI" class="headerlink" title="2、Janitor AI"></a>2、Janitor AI</h3><p><img src="https://baozang.io/wp-content/uploads/2025/01/1735876262-image.png.webp" alt="Janitor 首页预览"></p><p><strong>官方网址:</strong> <a href="https://janitorai.com/">https://janitorai.com/</a></p><p>Janitor AI 是一款沉浸式的 AI 角色扮演智能聊天工具，它采用了前沿、创新的技术与用户进行互动。</p><p>在 Janitor AI 你可以自由地和名人、明星、动漫角色、游戏角色，以及用户创建的原创角色聊天，支持的角色目前多达 35 万+个。Janitor AI 的角色各具特点，每一个角色都详细写明了 TA 的性格特点与背景经历，也提前说明了与 TA 聊天你可能会经历的体验，可以满足广大用户群体多样化的情感需求与癖好。</p><p>Janitor AI 最特别的地方就是它<strong>并不限制成人内容</strong>，你可以和你心仪的角色尽情聊 <strong>NSFW</strong>（Not Safe For Work）内容，Janitor AI 会为你的私人对话提供完美的保护，不用担心你的聊天记录有任何泄漏。</p><p>目前 Janitor AI 网站访问量较大，打开页面后需要等待一会儿才能进入，一般 1-2 分钟后即可进入，途中切勿关闭页面。</p><h4 id="功能一览-1"><a href="#功能一览-1" class="headerlink" title="功能一览"></a>功能一览</h4><ul><li>AI 角色聊天</li><li>AI 角色创建</li><li>用户人设创建</li><li>聊天历史记录查询</li><li>海量角色，含原创角色、二次元角色、明星名人等</li><li>角色分类标签查询</li><li>R18 内容无限制聊天</li></ul><h4 id="支持的语言-1"><a href="#支持的语言-1" class="headerlink" title="支持的语言"></a>支持的语言</h4><ul><li>英语 (EN)</li></ul><h4 id="价格说明-1"><a href="#价格说明-1" class="headerlink" title="价格说明"></a>价格说明</h4><p>Janitor AI 免费。</p><h4 id="注册方式-1"><a href="#注册方式-1" class="headerlink" title="注册方式"></a>注册方式</h4><p><strong>注册地址:</strong> <a href="https://tarotap.com/zh/login">https://tarotap.com/zh/login</a> Janitor AI 支持<strong>邮箱注册</strong>、<strong>谷歌邮箱（Gmail）注册</strong>、<strong>X（Twitter）注册</strong>、<strong>Discord 注册</strong>。</p><h3 id="3、Rushchat-AI"><a href="#3、Rushchat-AI" class="headerlink" title="3、Rushchat.AI"></a>3、Rushchat.AI</h3><p><img src="https://baozang.io/wp-content/uploads/2025/02/1739332161-image.png.webp" alt="Rushchat.AI 首页预览"></p><p><strong>官方网址:</strong> <a href="https://rushchat.ai/">https://rushchat.ai/</a></p><p>Rushchat.AI 是一款热度极高的支持 AI 角色扮演的在线聊天工具。Rushchat.AI 提供海量设定丰富的虚拟角色，包含二次元角色，及三次元拟真角色，用户可以利用标签分类筛选，并按照角色性格、前情描述来选择喜欢的 AI 角色并与 TA 聊天，角色们不仅会用文字回复你，还会用图片回复你。Rushchat.AI 并不限制你们的聊天内容，官方明确说明了此软件支持 18+聊天（严禁未成年内容）。Rushchat.AI 还支持保存记忆， AI 角色会记住你想让 TA 记住的一切信息，例如你的喜好、关系发展、事件等等。</p><h4 id="功能一览-2"><a href="#功能一览-2" class="headerlink" title="功能一览"></a>功能一览</h4><ul><li>多类型海量 AI 角色（支持 3D 拟真化角色和 2D 卡通角色，其中包含动漫角色及原创角色）</li><li>标签筛选</li><li>图片回复</li><li>记忆保存</li><li>聊天记录查询</li><li>精彩聊天分享</li><li>角色创造</li><li>多语言支持</li><li>R18 内容无限制聊天</li></ul><h4 id="支持的语言-2"><a href="#支持的语言-2" class="headerlink" title="支持的语言"></a>支持的语言</h4><ul><li>英语 (EN)</li><li>德语 (DE)</li><li>西班牙语 (ES)</li><li>法语 (FR)</li><li>印尼语 (ID)</li><li>意大利语 (IT)</li><li>日语 (JA)</li><li>韩语 (KO)</li><li>波兰语 (PL)</li><li>葡萄牙语 (PT)</li><li>土耳其语 (TR)</li><li>阿拉伯语 (AR)</li></ul><h4 id="价格说明-2"><a href="#价格说明-2" class="headerlink" title="价格说明"></a>价格说明</h4><p>Rushchat.AI 不支持免费使用，如需解锁完整权益可考虑购买付费套餐。</p><h4 id="注册方式-2"><a href="#注册方式-2" class="headerlink" title="注册方式"></a>注册方式</h4><p><strong>注册地址:</strong> <a href="https://rushchat.ai/">https://rushchat.ai/</a> Rushchat.AI 支持<strong>谷歌账号注册</strong>、<strong>苹果账号注册</strong>、<strong>Discord 账号注册</strong>、<strong>通用邮箱注册</strong>。</p><h3 id="4、Dream-Companion"><a href="#4、Dream-Companion" class="headerlink" title="4、Dream Companion"></a>4、Dream Companion</h3><p><img src="https://baozang.io/wp-content/uploads/2025/02/1739416361-image.png.webp" alt="Dream Companion 首页预览"></p><p><strong>官方网址:</strong> <a href="https://www.mydreamcompanion.com/">https://www.mydreamcompanion.com/</a></p><p>Dream Companion 是一款仅限成年人使用的 AI 角色扮演平台，旨在为用户提供沉浸式的互动聊天体验。网站提供多个动漫和现实风格的 AI 角色，其中大部分角色为女性，男性角色较少，每个角色都有不同的形象与设定，可以自由选择喜欢的角色并与其进行独一无二的亲密互动。Dream Companion 基于先进的深度学习技术，AI 角色可以根据自己的设定与你的消息生成兼具逻辑性和创造性的回复，并不断通过互动来进行学习和适应以生成更符合用户偏好的回复，还支持将回复转化成逼真的语音、根据你的要求生成各式各样的自拍（NSFW），无论你想尝试无限制的趣味角色扮演，还是想寻求一个理想化的忠诚的伴侣，Dream Companion 都能满足你的个性化需求。</p><p>Dream Companion 还支持私人定制独属于自己的 AI 虚拟伴侣，你可以选择通过简单模式快速创建一个优秀的 AI 伴侣，也可以选择专业模式创造一个具有完整世界观、背景、场景、性格的原创 AI 角色。角色的形象可以直接在网站中利用 AI 图片功能生成，甚至还能根据用户的需求调整外观、服装、表情等细节，使每个虚拟伴侣都独一无二，完全符合个人的想象与喜好。</p><h4 id="功能一览-3"><a href="#功能一览-3" class="headerlink" title="功能一览"></a>功能一览</h4><ul><li>海量原创多类型 AI 角色</li><li>NSFW 角色聊天</li><li>图片回复（NSFW）</li><li>语音回复</li><li>长期记忆</li><li>聊天记录查询</li><li>角色创造</li><li>形象图片生成</li><li>多语言支持</li></ul><h4 id="支持的语言-3"><a href="#支持的语言-3" class="headerlink" title="支持的语言"></a>支持的语言</h4><ul><li>英语 (EN)</li><li>中文（ZH）（你可以要求角色说中文，但中文表现不好）</li></ul><h4 id="价格说明-3"><a href="#价格说明-3" class="headerlink" title="价格说明"></a>价格说明</h4><p>Dream Companion 登录注册后支持<strong>免费使用</strong>，可以免费发送消息，但不能查看图片，也不能听语音回复，若需更多额度可以考虑购买付费套餐。</p><h4 id="注册方式-3"><a href="#注册方式-3" class="headerlink" title="注册方式"></a>注册方式</h4><p><strong>注册地址:</strong> <a href="https://www.mydreamcompanion.com/">https://www.mydreamcompanion.com/</a> Dream Companion 支持<strong>谷歌账号注册</strong>、<strong>通用邮箱注册</strong>。</p><h3 id="5、Rolemantic-AI"><a href="#5、Rolemantic-AI" class="headerlink" title="5、Rolemantic AI"></a>5、Rolemantic AI</h3><p><img src="https://baozang.io/wp-content/uploads/2025/02/1739341274-image.png.webp" alt="Rolemantic AI 首页预览"></p><p><strong>官方网址:</strong> <a href="https://rolemantic.com/">https://rolemantic.com/</a></p><p>Rolemantic AI 是一款拥有 30,000+角色的 AI 角色扮演软件。用户可以在 Rolemantic AI 与喜爱的角色无限制聊天（18+），进行实时、有趣的亲密互动，你和角色间的关系发展将完全取决于你的选择，所有的对话和情节走向都由你来决定。在 Rolemantic AI 中，你可以与动漫角色聊天，与游戏角色聊天，与原创的角色聊天，无论你的喜好如何小众，都能通过标签筛选快速找到符合你口味的设定。Rolemantic AI 支持自然的语音回复，并且所有角色都有属于 TA 自己的独特设定和形象，你可以从聊天中感受到对方的情感倾向和变化，搭配拟真的声线，让你得以获得一段真实的交往体验。另外，Rolemantic AI 也支持创建角色，并且可以直接在网站内生成角色的形象图片。</p><p>Rolemantic AI 不仅可以充当你的 AI 男友/女友、工作聊天搭子，还可以充当英语练习工具、沟通技巧联系对象、树洞、互动小说模拟器，多种玩法等你发掘，每一次都为你带来满满的新鲜感。</p><h4 id="功能一览-4"><a href="#功能一览-4" class="headerlink" title="功能一览"></a>功能一览</h4><ul><li>AI 角色扮演</li><li>18+无限制聊天</li><li>语音回复</li><li>图片回复</li><li>标签筛选</li><li>角色创建</li><li>形象图片生成</li></ul><h4 id="支持的语言-4"><a href="#支持的语言-4" class="headerlink" title="支持的语言"></a>支持的语言</h4><ul><li>英语 (EN)</li><li>中文（需在聊天中要求对方说中文才行）</li></ul><h4 id="价格说明-4"><a href="#价格说明-4" class="headerlink" title="价格说明"></a>价格说明</h4><p>Rolemantic AI 注册登录后可<strong>免费使用</strong>，可进行对话，但不能听语音回复，也不能看到图片回复，如需解锁完整权益可考虑购买付费套餐。</p><h4 id="注册方式-4"><a href="#注册方式-4" class="headerlink" title="注册方式"></a>注册方式</h4><p><strong>注册地址:</strong> <a href="https://rolemantic.com/signup">https://rolemantic.com/signup</a> Rolemantic AI 支持<strong>谷歌账号注册</strong>、<strong>通用邮箱注册</strong>。</p><p>JuicyC支持<strong>谷歌账号注册</strong>、<strong>苹果账号注册</strong>、<strong>Discord 账号注册</strong>、<strong>通用邮箱注册</strong>。</p><h3 id="6、CrushOn-Al"><a href="#6、CrushOn-Al" class="headerlink" title="6、CrushOn.Al"></a>6、CrushOn.Al</h3><p><img src="https://baozang.io/wp-content/uploads/2025/01/1735886460-image.png.webp" alt="CrushOn.Al 首页预览:"></p><p><strong>官方网址:</strong> <a href="https://crushon.ai/">https://crushon.ai/</a></p><p>CrushOn.Al 是一款可与 AI 虚拟角色进行实时聊天的对话软件，内含海量风格各异的原创角色，支持多种时下流行的形象、属性、人设、世界观，可与用户进行无限制的实时聊天，或是进行文字 RPG 探险、创作故事，自由度极高，不仅能为用户提供陪伴与情绪价值，还能满足各类幻想，进行多类型的情感互动。除了聊天功能外，用户也可以自行创建符合自己喜好的角色并与其进行互动，可创建动漫、小说等影视角色，也可以基于现实中的人创建其虚拟形象。</p><h4 id="功能一览-5"><a href="#功能一览-5" class="headerlink" title="功能一览"></a>功能一览</h4><ul><li>AI 角色扮演</li><li>群聊</li><li>中文支持</li><li>海量虚拟角色</li><li>标签筛选查找角色</li><li>角色收藏</li><li>高自由度对话</li><li>自定义创建角色</li><li>聊天背景自定义</li><li>创建多份个人资料卡</li><li>明暗显示切换</li></ul><h4 id="支持的语言-5"><a href="#支持的语言-5" class="headerlink" title="支持的语言"></a>支持的语言</h4><ul><li>英语 (EN)</li><li>葡萄牙语 (PT)</li><li>德语 (DE)</li><li>俄语 (RU)</li><li>印度尼西亚语 (ID</li><li>西班牙语 (ES)</li><li>菲律宾语 (FIL)</li><li>法语 (FR)</li><li>波兰语 (PL)</li><li>意大利语 (IT)</li><li>日语 (JA)</li><li>韩语 (KO)</li><li>繁体中文 (ZH-TW)</li></ul><h4 id="价格说明-5"><a href="#价格说明-5" class="headerlink" title="价格说明"></a>价格说明</h4><p>CrushOn.Al 注册登录后可<strong>免费使用</strong>，支持无限聊天，可创建 10 个个人资料卡，享受 8k 内存。如需解锁完整权益可考虑购买付费套餐。</p><h4 id="注册方式-5"><a href="#注册方式-5" class="headerlink" title="注册方式"></a>注册方式</h4><p><strong>注册地址:</strong> <a href="https://crushon.ai/zh-tw/auth/signin?callbackUrl=https://crushon.ai/zh-tw">https://crushon.ai/zh-tw/auth/signin?callbackUrl=https://crushon.ai/zh-tw</a> CrushOn.Al 支持<strong>谷歌邮箱 Gmail 注册</strong>、<strong>苹果账号注册</strong>、<strong>Discord 注册</strong>、<strong>通用邮箱注册</strong>。</p><h3 id="7、冒泡鸭"><a href="#7、冒泡鸭" class="headerlink" title="7、冒泡鸭"></a>7、冒泡鸭</h3><p><img src="https://baozang.io/wp-content/uploads/2025/02/1739424961-image.png.webp" alt="冒泡鸭首页预览:"></p><p><strong>官方网址:</strong> <a href="https://maopaoya.com/">https://maopaoya.com/</a></p><p>冒泡鸭是一款由阶跃星辰推出的免费 AI 聊天软件。冒泡鸭的主要功能包括 AI 问答、AI 角色扮演、AI 剧情互动、 自定义创建角色及剧情。在冒泡鸭中，用户可以与网友或是官方原创的 AI 角色进行有趣的互动，营造一段轻松的亲密关系；也可以在一些设定好的场景里进行文字冒险，自由控制剧情走向，与 AI 一同创造独一无二的故事。用户还可以自定义创建新的 AI 角色或是剧情，打造属于自己的专属伴侣和世界。</p><h4 id="功能一览-6"><a href="#功能一览-6" class="headerlink" title="功能一览"></a>功能一览</h4><ul><li>AI 角色扮演</li><li>AI 剧情互动</li><li>AI 问答</li><li>自定义创建 AI 角色和剧情</li><li>多平台使用</li></ul><h4 id="支持的语言-6"><a href="#支持的语言-6" class="headerlink" title="支持的语言"></a>支持的语言</h4><ul><li>中文（ZH）</li></ul><h4 id="价格说明-6"><a href="#价格说明-6" class="headerlink" title="价格说明"></a>价格说明</h4><p>冒泡鸭登录注册后支持<strong>免费使用</strong>。</p><h4 id="注册方式-6"><a href="#注册方式-6" class="headerlink" title="注册方式"></a>注册方式</h4><p><strong>注册地址:</strong> <a href="https://maopaoya.com/">https://maopaoya.com/</a> 冒泡鸭支持<strong>手机号注册</strong>。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你擅长英文，那么更建议使用 1-6 的国外软件，它们限制更少、可玩性更高、文本生成表现更佳；但如果你只想使用中文软件，那么 7 也能很好地满足你的需求，它虽然有一定的限制，但可玩性也不低，且设定和题材非常契合中文互联网的偏好。那么祝大家玩得开心～</p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 角色扮演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【2025】最新 10 款 AI 虚拟数字人制作软件，体验高拟真直播带货、口播视频生成.md</title>
      <link href="/2025/02/28/ce-ping-wen-zhang/shu-zi-ren/"/>
      <url>/2025/02/28/ce-ping-wen-zhang/shu-zi-ren/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>还记得电影里出现的那些会说话、能互动的虚拟人物吗？从科幻电影中的未来幻想，到如今生活中的真实存在，AI 数字人正在以惊人的速度走进我们的视野。不管是智能客服、虚拟主播，还是品牌代言人，这些数字人不仅展现了技术的无限可能，更为内容创作和商业应用带来了全新的玩法。<br>本篇文章将为大家推荐 10 款出色的 AI 数字人制作工具，帮助你快速打造一个独一无二的虚拟人物。无论你是想制作一个专业的虚拟形象，还是单纯地体验 AI 技术的乐趣，这些工具都能满足你的期待。一起开启 AI 数字人创作之旅吧！</p><h3 id="1、Tavus"><a href="#1、Tavus" class="headerlink" title="1、Tavus"></a>1、Tavus</h3><p><a href="https://baozang.io/wp-content/uploads/2025/01/1736475753-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/01/1736475753-image.png.webp" alt="Tavus 首页预览"></a></p><p>Tavus 首页预览</p><p><a href="https://www.tavus.io/">官方网址</a></p><p>Tavus 是一款先进的 AI 数字人对话工具。Tavus 基于具有开创性的 Phoenix-2 模型和对话式视频接口(CVI)，可以为用户生成高保真的数字人，生成的数字人具有自然的面部表情和动作，不仅能根据脚本生成高质量视频，还能与客户进行流畅、低延迟的实时对话，使客户获得如同与真人进行交互一般的良好体验。Tavus 支持 30+种语言，可为不同国家的用户提供本地化支持，协助企业出海，破除语言障碍。</p><p>Tavus 为企业客户提供了便捷的 API 和开发者工具，让其能在应用中轻松部署 Tavus，有助于提升用户的使用体验，适合在营销、教育、客户服务等场景中应用。此外，Tavus 准备了一系列安全检查措施，严格保障用户的隐私安全及品牌安全。</p><p>感兴趣可去官网体验实时对话。</p><h3 id="功能一览"><a href="#功能一览" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>数字人构建</strong>：快速创建高度逼真的数字人化身，具有自然的面部表情和肢体动作，为用户打造高度拟真的互动体验。</li><li><strong>AI 视频生成</strong>：可根据脚本或音频一键生成数字人视频，可选自己的数字人化身，也可使用 Tavus 提供的数字人，无需进行实际录制，也无需任何剪辑技巧与知识，简单而便捷。</li><li><strong>实时对话交互</strong>：可部署具有说话、观看、聆听能力的 AI 数字人，可与用户进行流畅而自然的实时交互，响应时间只需 600 毫秒。</li><li><strong>多语言支持</strong>：支持 30 种语言，为各国用户打造本土化体验。</li><li><strong>先进的 AI 模型</strong>：采用独创且先进的 Phoenix-2 模型，利用全新的以音频、文本驱动的 3D 模型，将 3D Gaussian Splatting 提供的体积渲染技术与 2D 生成对抗网络 (GAN) 相结合，可直接从用户上传的短视频生成极度逼真的数字人模型。</li><li><strong>API 集成</strong>：为企业用户提供简单、便捷的 API 集成服务，在应用中部署沉浸式的 AI 数字人交互体验，有效提升客户服务质量。</li></ul><h3 id="注册说明"><a href="#注册说明" class="headerlink" title="注册说明"></a>注册说明</h3><p><a href="https://platform.tavus.io/auth/sign-up?plan=free">注册地址</a> Tavus 支持<strong>谷歌邮箱 Gmail 注册</strong>、<strong>普通邮箱注册</strong>。</p><h3 id="价格说明"><a href="#价格说明" class="headerlink" title="价格说明"></a>价格说明</h3><p>Tavus 注册登录后可<strong>免费试用</strong>，可以使用 Tavus 提供的 5 个数字人，创建 3 分钟以内的视频，体验 10 分钟的 AI 对话，无法创建数字人化身，如需解锁完整权益可考虑购买付费方案。</p><h3 id="2、HeyGen"><a href="#2、HeyGen" class="headerlink" title="2、HeyGen"></a>2、HeyGen</h3><p><a href="https://baozang.io/wp-content/uploads/2025/01/1736410585-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/01/1736410585-image.png.webp" alt="HeyGen 首页预览"></a></p><p>HeyGen 首页预览</p><p><a href="https://www.heygen.com/">官方网址</a></p><p>HeyGen 是一款基于人工智能技术的数字人视频制作平台。HeyGen 提供一种简单的数字人创造方式，用户只需使用网络摄像头，便可快速创建 1：1 还原的虚拟形象化身。在 HeyGen 中，创作视频不再需要专业的剪辑技巧，用户可以像编辑文本一样制作视频，只需上传文本，数字人就可以为你以逼真的语气、表情、动作朗读内容，轻松实现视频创作。</p><p>平台支持 175 种语言，可自动翻译并添加字幕，同时确保数字人口型的完美匹配，优化观众的观看体验。HeyGen 还内置了丰富的资源库，包括数字人服饰、背景、插图、视频模板等等，轻点即可替换，操作便捷而高效。凭借专业的生成式功能，HeyGen 不仅降低了视频制作成本，还让每个人都能轻松创作出高质量的视频内容。</p><h3 id="功能一览-1"><a href="#功能一览-1" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>数字人轻松生成</strong>：只需上传或录制自己的视频，即可快速创建自身的虚拟化身，效果逼真。</li><li><strong>简化视频创作</strong>：输入文本即可直接生成数字人播报视频，如需修改视频内容，只需编辑文本即可，简单而高效。</li><li><strong>多语言支持</strong>：支持包含中文在内的 175 种语言，可自动添加字幕、翻译、对口型，完美实现视频本土化，为视频出海提供强有力的支持。</li><li><strong>丰富的资源库</strong>：为用户提供大量高质量素材，涵盖数字人形象、数字人服饰、数字人背景、插图、视频模板等。</li><li><strong>视频自动翻译</strong>：自动将视频翻译成 175 种语言，同时保持原有的声音，并自动匹配对应语言的口型。</li><li><strong>文本转语音</strong>：可将文本转化为自然、流畅的语音，支持 40+种语言，300+种语音，适配不同场景。</li><li><strong>自定义品牌套件</strong>：可定制自己的品牌标识，并应用在视频中，让视频显得更专业，进一步渲染品牌形象。</li></ul><h3 id="注册说明-1"><a href="#注册说明-1" class="headerlink" title="注册说明"></a>注册说明</h3><p><a href="https://app.heygen.com/signup">注册地址</a> HeyGen 支持<strong>谷歌邮箱 Gmail 注册</strong>、<strong>普通邮箱注册</strong>、<strong>苹果账号注册</strong>。</p><h3 id="价格说明-1"><a href="#价格说明-1" class="headerlink" title="价格说明"></a>价格说明</h3><p>HeyGen 注册登录后可<strong>免费使用</strong>，每月可免费创作 3 支视频，每支视频最多 3 分钟，最高画质 720p，可以免费创建 1 个数字人，如需解锁完整权益可考虑购买付费方案。</p><h3 id="3、D-ID"><a href="#3、D-ID" class="headerlink" title="3、D-ID"></a>3、D-ID</h3><p><a href="https://baozang.io/wp-content/uploads/2024/04/image-268.png.webp"><img src="https://baozang.io/wp-content/uploads/2024/04/image-268.png.webp" alt="D-ID 首页预览"></a></p><p>D-ID 首页预览</p><p><a href="https://www.d-id.com/creative-reality-studio/">官方网址</a></p><p>D-ID 是一个基于人工智能技术的生成式视频创作平台。只需简单提供文字或图像内容，D-ID 就能通过深度学习人脸动画技术，直接生成以数字人为主角的精彩视频内容，支持100+种语言的视频输出。</p><p>D-ID 的强大功能能为用户降低视频制作成本，提高创作效率，并实现完全个性化的定制。</p><h3 id="功能一览-2"><a href="#功能一览-2" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>AI 口播视频生成</strong>：只需提供文案，选择语言、声音、主播即可一键创建视频。</li><li><strong>多语言支持</strong>：支持几十多种语言配音，包括中文以及部分中国方言。</li><li><strong>主播形象库</strong>：内置海量高质量主播形象，包含各种国籍、行业。</li><li><strong>AI 形象创建</strong>：支持用提示词生成 AI 主播形象。</li><li><strong>配音录制及上传</strong>：支持录制并上传音频，可上传 MP3、MP4、WAV 格式，最大支持15 MB。</li><li><strong>AI 经纪人创建</strong>：简单几步轻松创建属于你的经纪人或客服，为你接待客户。</li></ul><h3 id="注册说明-2"><a href="#注册说明-2" class="headerlink" title="注册说明"></a>注册说明</h3><p><a href="https://auth.d-id.com/u/signup/identifier?state=hKFo2SA3MV9Za2tWV05jR3FUNlNaSVJrOVRLZFBqNXBYV0o3V6Fur3VuaXZlcnNhbC1sb2dpbqN0aWTZIEhjRlR2LXpjX0JtZUdSdlFOT3ZOWXJsRVFpcFNBRHFLo2NpZNkgR3pyTkkxT3JlOUZNM0VlRFJmM20zejNUU3cwSmxSWXE">注册地址</a> D-ID 支持<strong>谷歌邮箱（Gmail）注册</strong>、<strong>领英账号注册</strong>、<strong>苹果账号注册</strong>、<strong>普通邮箱注册</strong>。</p><h3 id="价格说明-2"><a href="#价格说明-2" class="headerlink" title="价格说明"></a>价格说明</h3><p>D-ID 注册登录后支持<strong>免费试用</strong>，新用户可获赠 20 积分用于带水印的视频和经纪人生成，生成1个视频耗费一个积分，如需更多高级功能及更多生成额度可购买会员。</p><h3 id="4、Kreado-AI"><a href="#4、Kreado-AI" class="headerlink" title="4、Kreado AI"></a>4、Kreado AI</h3><p><a href="https://baozang.io/wp-content/uploads/2025/01/1736487470-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/01/1736487470-image.png.webp"></a></p><p>Kreado AI 首页预览</p><p><a href="https://kreadoai.com/">官方网址</a></p><p>Kreado AI 是一款强大的 AI 数字人视频创作工具。Kreado AI 提供 700+数字人形象，以及 1600+种人物音色，此外它还支持创建 1 : 1 真人克隆的数字分身，只需上传 5 分钟录制视频就能打造高度还原真人神态与声音的虚拟化身，用户可选择利用克隆分身或在平台资源库里选择符合品牌形象的的数字人一键生成口播视频、搭建直播间，或是为客户提供实时互动体验。Kreado AI 支持 140+种语言，可覆盖更多地区的客户，增加产品收入来源，增强品牌国际化形象。</p><p>Kreado AI 除了制作数字人视频外，还集成了多项 AI 功能，例如文字、图片处理，配音，换脸，试衣等，让营销创作更快、更好、更简单。</p><h3 id="功能一览-3"><a href="#功能一览-3" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>真人数字人</strong>：提供 700+位 AI 数字人形象，覆盖不同的年龄、肤色，与职业，可满足丰富的应用场景。</li><li><strong>多语言支持</strong>：支持包含中文在内的 140+种语言。</li><li><strong>多音色支持</strong>：提供 1600+种人物音色，并持续保持更新，风格、语调各异，适配不同语言与应用场景，让专业视频制作更生动、更具感染力。</li><li><strong>数字人克隆</strong>：只需 5 分钟真人出镜录制视频，就可以克隆出专属的虚拟数字人化身，1：1还原真人神态。</li><li><strong>语音克隆</strong>：只需 5 分钟真人出镜录制视频，就可以高度还原真人音色、音律，可随意切换语言。</li><li><strong>数字人直播</strong>：提供数字人直播一站式服务，轻松搭建专业的直播间，可自动生成文案脚本，可一键搭配多场景模板，并具备自动直播场控功能，可模拟真人直播话术智能回复用户咨询的问题，降低营销成本并提升营销效果。</li><li><strong>AI 智能实时导购</strong>：可将数字人导购集成到站点，实现商品直播、点播讲解、实时问答，更好的与受众用户互动。</li><li><strong>照片数字人口播</strong>：只需上传一张图片，便可为用户生成会说话的照片数字人物，让照片中的人物动起来，并根据文案进行口播，不仅支持真人也支持卡通人物。</li><li><strong>数字人 PPT 创作</strong>：只需上传 PPT，选择虚拟数字人充当讲解员，即可生成生动有趣的 PPT 讲解视频。</li><li><strong>网址生成营销短视频</strong>：可从产品网页链接或营销文本生成营销短视频，Al 会自动采集网页里关键内容，并自动生成脚本及卖点文案，然后自动匹配受众地域及数字口播人物，采集商品图片，设定视频时长、背景音乐等元素，最后基于积累的高转化的爆款视频不同行业营销数据模型，快速生成高转化的爆款广告视频。</li><li><strong>AI 文本配音</strong>：利用人工智能技术自动将文本转化为语音，可自由搭配音色与语言。</li><li><strong>AI 营销文案</strong>：利用提示词快速生成高质量营销文案，支持 20 种语言。</li><li><strong>AI 视频换脸</strong>：只需上传视频并点击脸部即可轻松完成视频换脸。</li><li><strong>AI 假发模特</strong>：根据假发商品图生成试戴假发的 AI 模特照片，助力营销增长，生成的模特图支持换脸。</li><li><strong>AI 智能抠图</strong>：可快速去除图片背景，突出主体。</li><li><strong>AI 假发试戴</strong>：可基于 AI 技术，为顾客提供假发试戴效果预览服务，降低退货率并提升收入。</li></ul><h3 id="注册说明-3"><a href="#注册说明-3" class="headerlink" title="注册说明"></a>注册说明</h3><p><a href="https://kreadoai.com/ai/login?redirect=/">注册地址</a> Kreado AI 支持<strong>谷歌邮箱 Gmail 注册</strong>、<strong>普通邮箱注册</strong>、<strong>手机号注册</strong>。</p><h3 id="价格说明-3"><a href="#价格说明-3" class="headerlink" title="价格说明"></a>价格说明</h3><p>Kreado AI 注册登录后可<strong>免费使用</strong>，登录即送 180 个 K 币，可生成 3 分钟视频，每天签到亦可得 K 币，如需解锁完整权益可考虑购买付费方案。</p><h3 id="5、百度智能云曦灵"><a href="#5、百度智能云曦灵" class="headerlink" title="5、百度智能云曦灵"></a>5、百度智能云曦灵</h3><p><a href="https://baozang.io/wp-content/uploads/2025/01/1736494837-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/01/1736494837-image.png.webp"></a></p><p>百度智能云曦灵首页预览</p><p><a href="https://xiling.cloud.baidu.com/">官方网址</a></p><p>百度智能云曦灵是一款集虚拟形象定制与多场景应用为一体的 AI 数字人解决方案，助力企业实现智能化升级。它涵盖数字人直播、视频创作和智能对话三大功能，直播高效便捷，带货表现出色；视频制作直观简单，效果一目了然；对话互动智能专业，满足多场景需求。曦灵基于文心大模型，不仅能生成多风格的直播和视频文案，还能在实时互动中提供及时、精准的回答。可通过先进的 AI 算法，让数字人具备逼真的动作、表情，与自然匹配的口型，并能根据语义实时生成合适的反应，展现高度拟真的表现力。</p><p>曦灵支持多种形象定制方式，包括文生 3D 数字人、2D 数字人，以及照片生成数字人，同时它也为用户提供多种风格的数字人模板，全面满足个性化需求。同时，其语音合成功能提供多种音色选择，声音真实而生动，无论用于直播还是客服，都能增强用户体验和互动效果。</p><p>曦灵兼容多种渲染模式和通信协议，曦灵适配多终端环境，支持云端和本地渲染，可快速部署并开箱即用，为企业提供灵活高效的数字人应用方案。</p><h3 id="功能一览-4"><a href="#功能一览-4" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>2D 数字人克隆</strong>：快速克隆形象，打造如同真人的逼真 2D 数字人。</li><li><strong>照片数字人克隆</strong>：利用 AI 能力让照片动起来，让人像说话、动作。</li><li><strong>3D 数字人生成</strong>：基于文字描述生成符号要求的数字人 3D 数字人形象。</li><li><strong>声音克隆</strong>：上传 30 秒-5 分钟内的音频即可克隆声线，还原音色与语调。</li><li><strong>数字人直播</strong>：支持快速搭建直播间、弹幕智能问答等能力，提供超逼真的数字人主播，完成 7*24 小时在线直播。</li><li><strong>数字人视频</strong>：精编视频提供强大的编辑功能，裂变视频可一键生成 10~20 条精彩素材，轻松打造优质数字人视频。</li><li><strong>数字人对话</strong>：轻松构建有知识、有技能、有⼈格的新⼀代交互型数字⼈，让交流更具新意，体验更加智能。</li><li><strong>模板资源库</strong>：提供丰富的高质量模板，涵盖直播间、视频，以及实时对话模板，支持一键应用做同款。</li><li><strong>数字人资源库</strong>：提供包含不同维度、年龄、性别、姿势的风格各异的数字人形象，可适配不同的应用场景与品牌风格。</li><li><strong>语音资源库</strong>：提供包含不同年龄、性别、风格、语言、语调的丰富 AI 音色。</li></ul><h3 id="注册说明-4"><a href="#注册说明-4" class="headerlink" title="注册说明"></a>注册说明</h3><p><a href="https://xiling.cloud.baidu.com/">注册地址</a> 百度智能云曦灵支持<strong>百度帐号登录</strong>。</p><h3 id="价格说明-4"><a href="#价格说明-4" class="headerlink" title="价格说明"></a>价格说明</h3><p>百度智能云曦灵注册登录后可<strong>免费使用</strong>，可免费克隆 1 个 2D 数字人，生成 1 个 3D 数字人，生成 10 分钟的适配，生成 1 个 AI 卡片，进行 10 次数字人对话，如需解锁完整权益可考虑购买付费方案。</p><h3 id="6、讯飞智作"><a href="#6、讯飞智作" class="headerlink" title="6、讯飞智作"></a>6、讯飞智作</h3><p><a href="https://baozang.io/wp-content/uploads/2024/05/1716188878-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2024/05/1716188878-image.png.webp" alt="讯飞智作首页预览"></a></p><p>讯飞智作首页预览</p><p><a href="https://peiyin.xunfei.cn/">官方网址</a></p><p>讯飞智作是科大讯飞研发的一款 AI 多媒体内容创作平台。讯飞智作可以为用户提供视频生成、视频剪辑、文案生成、数字人直播、AI 配音生成视频等服务，素材模版多种多样，包括虚拟人、语音、图片、音乐等，且皆为正版，轻松帮助创作者提高效率以及创作的质量，是一款较为专业的视频创作工具。</p><h3 id="功能一览-5"><a href="#功能一览-5" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>AI 配音</strong>：利用 AI 生成并优化文案，选择合适的语音一键生成自然流畅的配音，超百种不同风格、年龄、性别、方言的声线可选，并支持更改局部的读音读法、连续停顿、读速语调、增添多人配音、配音翻译等。</li><li><strong>真人配音</strong>：可购买真人配音服务。</li><li><strong>AI 虚拟主播</strong>：支持文本、PPT 生成虚拟人播报视频，可选不同风格、年龄、性别的虚拟人主播，随意替换背景、声音，并自由增添前景素材贴纸和文字，具有适合多种应用场景的模板可选。</li><li><strong>视频创作台</strong>：简化剪辑页面，降低上手难度，让任何人都能轻松制作视频。</li><li><strong>创意视频</strong>：根据文字提示生成文案，上传图片，在进行简单的模板、主播、字幕设置后生成视频。</li><li><strong>AI 视频后期</strong>：根据视频内容生成文案。</li><li><strong>推文转视频</strong>：上传公众号链接生成视频。</li><li><strong>Word 转视频</strong>：上传 Word 文件一键生成视频。</li><li><strong>PPT 转视频</strong>：上传 PPT 一键生成视频。</li><li><strong>秒级声音&amp;形象构建</strong>：10 秒打造专属 AI 形象。</li><li><strong>虚拟数字分身</strong>：上传 5 分钟视频制作专属虚拟数字分身。</li><li><strong>专属 AI 声音</strong>：克隆声音。</li></ul><h3 id="注册说明-5"><a href="#注册说明-5" class="headerlink" title="注册说明"></a>注册说明</h3><p><a href="https://peiyin.xunfei.cn/">注册地址</a> 讯飞智作支持<strong>微信扫码注册</strong>、<strong>手机号验证注册</strong>。</p><h3 id="价格说明-5"><a href="#价格说明-5" class="headerlink" title="价格说明"></a>价格说明</h3><p>讯飞智作注册登录后支持<strong>免费试用</strong>，新用户可获赠 10 个声币，可用于配音智作，完善个人信息可获得视频制作时长和声币奖励，如需更多权益及使用额度可购买会员和语音包。</p><h3 id="7、即创"><a href="#7、即创" class="headerlink" title="7、即创"></a>7、即创</h3><p><a href="https://baozang.io/wp-content/uploads/2024/05/1716188224-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2024/05/1716188224-image.png.webp" alt="即创首页预览"></a></p><p>即创首页预览</p><p><a href="https://aic.oceanengine.com/workbench?bpId=1799549484558395&amp;from=ai-bot.cn">官方网址</a></p><p>即创是抖音推出的一款热门 AI 视频一站式创作平台，专门针对抖音商城的商品提供服务。它会从视频、文案、直播三个方面为用户提供帮助，支持一键生成带货视频、营销文案以及直播间背景和脚本，可帮助用户轻松提升营销效率，节省成本并提升净利润，全方位满足商家的需求。</p><h3 id="功能一览-6"><a href="#功能一览-6" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>AI 视频生成</strong>：根据文案一键成片，分为“一键成片”与“高阶成片”两种模式，生成的视频支持二次编辑，高阶成片相比一键成片增加了更多自定义功能，包括数字人、音乐、口播，添加提示语等。</li><li><strong>AI 数字人视频生成</strong>：可选多种数字人形象及配音，根据文案生成口播视频</li><li><strong>AI 图文创作</strong>：根据商品链接或 ID 快速生成商品卡图片和优质图文内容。</li><li><strong>AI 直播创作</strong>：支持一键生成直播间背景和直播脚本。</li></ul><h3 id="注册说明-6"><a href="#注册说明-6" class="headerlink" title="注册说明"></a>注册说明</h3><p><a href="https://aic.oceanengine.com/login">注册地址</a> 即创支持手机验证码注册、邮箱注册。</p><h3 id="价格说明-6"><a href="#价格说明-6" class="headerlink" title="价格说明"></a>价格说明</h3><p>即创目前处于公测阶段，所有功能均可<strong>免费试用</strong>。</p><h3 id="8、度加剪辑"><a href="#8、度加剪辑" class="headerlink" title="8、度加剪辑"></a>8、度加剪辑</h3><p><a href="https://baozang.io/wp-content/uploads/2024/05/1716262727-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2024/05/1716262727-image.png.webp" alt="度加剪辑首页预览"></a></p><p>度加剪辑首页预览</p><p><a href="https://ducut.baidu.com/">官方网址</a></p><p>度加剪辑是一款由百度推出的具备多重 AI 功能的视频剪辑与创作手机 APP。它推出了多种多样的 AI 功能，如 AI 文案、AI 成片、AI 快剪、AI 配音、AI 数字人等，满足了用户的剪辑刚需，很适合用于创作新闻解说视频、赛事解说视频、电商带货视频、影视解说视频等多样化视频内容，用户可利用它高效的 AI 功能、丰富的素材库，以及便捷的追热点功能轻松吸引流量打造爆款视频。</p><h3 id="功能一览-7"><a href="#功能一览-7" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>AI 成片：</strong> 输入文案一键生成视频。</li><li><strong>AI 数字人：</strong> 内置海量数字人形象，并支持定制，随时随地生成口播内容。</li><li><strong>AI 文案：</strong> 选择文案创作类别，提供主题，可一键生成精美文案。</li><li><strong>AI 提词：</strong> 智能跟随语速，字幕自动滚动调整。</li><li><strong>AI 快速剪辑：</strong> 无声、重复等无效片段一键删除。</li><li><strong>素材推荐：</strong> 贴纸、艺术字、音效智能匹配，一键提升视频网感。</li><li><strong>一键包装：</strong> 多种风格模板，一键搞定标题字幕、画布贴纸。</li><li><strong>AI 配音：</strong> 内置风格多样的语音包，专业智能配音。</li><li><strong>AI 进度条：</strong> 一键完成打点分段，进度条自动生成。</li><li><strong>海量图搜：</strong> 全网搜图，即搜即用。</li><li><strong>热点推荐</strong>：每分钟更新全网热点，点击可进行分析、生成。</li></ul><h3 id="注册说明-7"><a href="#注册说明-7" class="headerlink" title="注册说明"></a>注册说明</h3><p><a href="https://ducut.baidu.com/">下载地址</a>（应用内登录注册） 度加剪辑支持<strong>手机验证码注册</strong>、<strong>微信注册</strong>、<strong>QQ 注册</strong>、<strong>苹果账号注册</strong>。</p><h3 id="价格说明-7"><a href="#价格说明-7" class="headerlink" title="价格说明"></a>价格说明</h3><p>度加剪辑注册登录后可<strong>免费试用</strong>。</p><h3 id="9、一帧秒创"><a href="#9、一帧秒创" class="headerlink" title="9、一帧秒创"></a>9、一帧秒创</h3><p><a href="https://baozang.io/wp-content/uploads/2025/01/1736498912-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/01/1736498912-image.png.webp"></a></p><p>一帧秒创首页预览</p><p><a href="https://aigc.yizhentv.com/">官方网址</a></p><p>一帧秒创是一款基于公司自研的大模型以及一帧 AIGC 智能引擎的智能视频内容生成平台。它能为用户提供多种多样的 AI 生成服务，比如 AI 写作、AI 绘图、AI 图文生成视频、数字人播报、文字转语音等功能服务。一帧秒创通过对文字、图片、视频等素材的深度分析，快速生成、编辑视频，实现更加高效且零门槛的视频创作。为图文及视频创作者赋能，适合媒体、营销、电商、金融、影视等行业。</p><h3 id="功能一览-8"><a href="#功能一览-8" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>图文转视频</strong>：自动文章转视频、图片转视频，生成仅需1分钟，文案支持多种输入方式（文案输入、文章链接输入、Word 导入、在线“AI 帮写”）。</li><li><strong>智能配音字幕</strong>：输入文本自动完成配音，100+高质量语音可选。</li><li><strong>智能包装</strong>：众多竖版视频模板可选，自定义作者 ICON。</li><li><strong>数字人播报</strong>：内置 100+精品数字人，包含各种职业、地区的真人数字人形象，能更好地适应不同场景的需求。</li><li><strong>数字人直播</strong>：支持 24 小时在线，支持与真人主播、粉丝实时互动。</li><li><strong>数字人定制</strong>：支持真人形象、声音1:1还原。</li><li><strong>AI 帮写</strong>：融合秒创多模态语言模型，输入文字提示即可秒速生成原创文案内容。</li><li><strong>AI 作画</strong>：基于文字提示创作多样风格的精彩化作，并用于给视频增添内容。</li><li><strong>文字转语音</strong>：在线文字转高品质语音。</li><li><strong>智能横竖转</strong>：自动识别追踪画面主体，实现智能横竖转。</li><li><strong>视频去水印</strong>：框选水印，一步抹除。</li><li><strong>视频裁剪</strong>：高速无损裁剪视频。</li></ul><h3 id="注册说明-8"><a href="#注册说明-8" class="headerlink" title="注册说明"></a>注册说明</h3><p><a href="https://aigc.yizhentv.com/home/app/login?redirect_to=https://aigc.yizhentv.com/home/app">注册地址</a> 一帧秒创支持<strong>手机验证码注册</strong>、<strong>微信扫码注册</strong>、<strong>微博账号注册</strong>。</p><h3 id="价格说明-8"><a href="#价格说明-8" class="headerlink" title="价格说明"></a>价格说明</h3><p>一帧秒创注册登录后提供<strong>免费试用</strong>，免费用户可享受5分钟视频制作时长、免费 AI 配音、免费背景、免费音乐、文字转语音300字/月、AI 写作3次/日、AI 视频10秒时长、3GB 素材云储存空间等功能权益，如需获取更高级的功能和权益可购买会员和工具时长包。</p><h3 id="10、来画"><a href="#10、来画" class="headerlink" title="10、来画"></a>10、来画</h3><p><a href="https://baozang.io/wp-content/uploads/2025/01/1736499493-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/01/1736499493-image.png.webp"></a></p><p>来画首页预览</p><p><a href="https://www.laihua.com/">官方网址</a></p><p>来画是一款国产的 AI 视频生成与制作工具，基于公司自研的 SkinSoul 动画大模型推出了两种好用的功能：上传链接一键生成可控视频功能，支持转成动画和二次编辑；以及一键生成有形象的、风格多样的 AI 数字人助手功能，可生成卡通 IP 形象、克隆数字人和照片数字人。并且来画还能为用户定制对应的 AI 相框、AI 自动贩卖机、 AI 自助咖啡机、AI 照片绘画机等实体电子产品。非常适合个体商户或企业使用。</p><h3 id="功能一览-9"><a href="#功能一览-9" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>AI 视频生成</strong>：支持用户上传链接（淘宝、天猫、京东、微信公众号）一键生成多个视频，生成后支持二次编辑，并提供海量自有版权素材库，可按照喜好修改视频元素、文案等。</li><li><strong>AI 助手生成</strong>：为你定制有趣的卡通 IP 助手，和个性化人设的数字人助手，可以实现 24h 直播以及互动咨询，也可用于制作2D、3D 宣传物料和趣味表情包。支持通过 SDK 接入。</li></ul><h3 id="注册说明-9"><a href="#注册说明-9" class="headerlink" title="注册说明"></a>注册说明</h3><p><a href="https://www.laihua.com/dashboard/originality/animation">注册地址</a> 来画支持<strong>微信扫码注册</strong>、<strong>QQ 扫码注册</strong>、<strong>手机号注册</strong>、<strong>微博账号注册</strong>。</p><h3 id="价格说明-9"><a href="#价格说明-9" class="headerlink" title="价格说明"></a>价格说明</h3><p>来画注册登录后提供<strong>免费试用</strong>，新用户送试用次数，获取更多权益可购买会员。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>AI 数字人制作工具正在不断刷新我们对 AI 技术的认知，从形象创建到多场景应用，这些工具凭借其低成本、零门槛但高质量的创作模式，为内容创作者、企业和开发者带来了更多可能性。本篇推荐的 10 款工具各具特色，无论你是追求高效生产、逼真效果，还是想要探索虚拟人领域的新玩法，都能从中找到适合自己的选择。</p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐 6 款 AI 在线一键扩图工具，生成并延申背景，优化构图拯救废片.md</title>
      <link href="/2025/02/28/ce-ping-wen-zhang/kuo-tu-gong-ju/"/>
      <url>/2025/02/28/ce-ping-wen-zhang/kuo-tu-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们外出旅行时，看到美丽的风景，总会忍不住拍一张合照留作纪念。不过，旅行途中往往匆忙，很多时候还没来得及调整好角度，就按下了快门，回家修图时才发现构图不够完美。即使通过调整角度或裁剪图片改善构图，剩下的背景往往不足以呈现人与景的最佳比例，这样一来，原本带着氛围感的照片也会失去那份独特的感觉。但如果因为构图问题就放弃这些美丽的风景，似乎也太可惜了。所幸，随着 AI 技术的进步，我们现在可以使用 AI 扩图工具，补充被裁减掉的背景，让图片既能保持良好的透视和构图，又不用放弃掉大片背景。<br>本次为大家推荐 6 款实测好用的在线 AI 扩图APP，它们不仅操作简单，效果也十分出色。无论是旅行照、风景照还是卡通、动漫图片，这些工具都能帮你轻松延申背景，还原出自然、和谐的画面。接下来，就一起来看看这几款各具特色的工具吧！</p><h2 id="精选-6-款-AI-扩图工具推荐"><a href="#精选-6-款-AI-扩图工具推荐" class="headerlink" title="精选 6 款 AI 扩图工具推荐"></a>精选 6 款 AI 扩图工具推荐</h2><h3 id="1、Clipdrop"><a href="#1、Clipdrop" class="headerlink" title="1、Clipdrop"></a>1、Clipdrop</h3><p><a href="https://baozang.io/wp-content/uploads/2024/06/1717740118-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2024/06/1717740118-image.png.webp" alt="Clipdrop 首页预览"></a></p><p>Clipdrop 首页预览</p><p><a href="https://clipdrop.co/uncrop">官方网址</a></p><p>Clipdrop 是一个由 Stability AI（推出了 Stable Diffusion 的公司）研发的利用人工智能技术处理图像的在线工具，由 Jasper AI 提供支持。Clipdrop 具有多种强大的 AI P 图功能，如 AI 局部生成、AI 文生图、AI 换脸、图片无损放大、背景替换、AI 抠图、AI 消除、AI 扩图、AI 打光等，不仅免除了手动操作的麻烦，而且帮助用户提升了设计、创作的效率及质量，既强大又高效。</p><h3 id="功能一览"><a href="#功能一览" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>AI 扩图</strong>：扩展生成图片边缘以将图片放大至任意大小。</li><li><strong>AI 局部替换</strong>：替换、删除、修复图片的局部元素。</li><li><strong>图片裁剪</strong>：将图片裁剪成适合各类社媒平台的大小。</li><li><strong>AI 换脸</strong>：自动换脸任何照片。</li><li><strong>实时文生图</strong>：利用提示词实时快速生成图片。</li><li><strong>Jasper AI</strong>：AI 智能机器人助手，提问以生成内容。</li><li><strong>AI 背景替换</strong>：自动抠出物体并替换背景。</li><li><strong>AI 背景去除</strong>：自动去除图片背景，突出主体。</li><li><strong>AI 消除</strong>：自动消除物体。</li><li><strong>图片无损放大</strong>：提供图像 x2、x4、x8、x16 倍率放大，可同时处理 10 张图片，支持顺滑降噪或细节模式。</li><li><strong>手绘生成图像</strong>：利用简笔画图案生成精美的真实图像。</li><li><strong>AI 重新生成</strong>：创造一种图像的多种类似变体。</li><li><strong>AI 打光</strong>：重新生成好看的灯光效果。</li><li><strong>天空替换</strong>：AI 替换风景图的天空。</li><li><strong>AI 消除文字</strong>：自动消除图片里的文字。</li></ul><h3 id="扩图示例"><a href="#扩图示例" class="headerlink" title="扩图示例"></a>扩图示例</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740023341-QQ20250220-114812.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740023341-QQ20250220-114812.png.webp" alt="原图"></a></p><p>原图</p><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740023338-portrait-uncropped.jpg.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740023338-portrait-uncropped.jpg.webp" alt="扩图后"></a></p><p>扩图后</p><h3 id="价格说明"><a href="#价格说明" class="headerlink" title="价格说明"></a>价格说明</h3><p>Clipdrop 注册登录后支持<strong>免费试用</strong>，每种功能每天有一定的免费使用额度，次日更新。如需更多额度可以考虑购买付费计划。</p><h3 id="2、FlexClip"><a href="#2、FlexClip" class="headerlink" title="2、FlexClip"></a>2、FlexClip</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740024402-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740024402-image.png.webp" alt="FlexClip 页面预览"></a></p><p>FlexClip 页面预览</p><p><a href="https://www.flexclip.com/cn/tools/ai-image-extender/">官方网址</a></p><p>FlexClip 是一款一站式在线 AI 视频制作软件。FlexClip 基于前沿的人工智能技术的支持，可以为用户在图像、音频、视频等方面提供多种智能化的帮助，如 AI 生成图片、脚本、字幕、视频，AI 修复画质、AI 换脸等等，拥有 6000+ 风格各异、适用于营销、婚礼、影视等领域的精美视频模板，并提供海量文字、图片、音乐、特效、滤镜等素材，为用户大大简化了视频创作的流程，提升了创作的效率与质量。</p><p>其中 AI 扩图功能支持多种图片比例，一次最多可以同时生成 4 张图，只需上传照片，选择比例和数量，点击“生成”即可。</p><h3 id="功能一览-1"><a href="#功能一览-1" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li><strong>图片类</strong></li><li><strong>AI 扩图</strong>：使用 AI 扩展图片延伸图片背景并更改比例。</li><li><strong>AI 文生图</strong>：基于文字提示生成不同风格的图片。</li><li><strong>AI 图生图</strong>：使用 AI 图生图工具实现不同风格的图片转绘。</li><li><strong>AI 消除</strong>：自动消除图片中不需要的物体。</li><li><strong>AI 老照片修复</strong>：使用 AI 自动修复和增强老照片。</li><li><strong>AI 照片上色</strong>：利用 AI 轻松为黑白图像着色。</li><li><strong>AI 换脸</strong>：使用 AI 轻松将照片中的人脸替换为新面孔。</li><li><strong>AI 图片去背景</strong>：一键快速抠图，轻松获得透明背景图片。</li><li><strong>AI 画质提升</strong>：使用 AI 在线提高图像分辨率并增强图片。</li><li><strong>AI 图片转 3D 动画</strong>：将静止的 2D 图片转化为 3D 动画。</li><li><strong>音频类</strong></li><li><strong>AI 文字转语音</strong>：将文本转化成然人声。</li><li><strong>AI 音频降噪</strong>：利用 AI 降噪功能消除音频中的背景噪声。</li><li><strong>AI 人声分离</strong>：使用 AI 分离音频中的人声与背景音乐。</li><li><strong>视频类</strong></li><li><strong>AI 自动字幕</strong>：为视频自动生成字幕或说明，使用先进的机器学习算法，能准确识别你创作的音频，并在视频的正确时段分别添加字幕，支持 140 多种语言，多种字幕外观风格，并支持二次编辑。</li><li><strong>AI 文字转视频</strong>：根据提示、文章内容或者 URL 生成视频。</li><li><strong>AI 博客转视频</strong>：粘贴 Blog 链接，自动将 Blog 转化为引人入胜的视频。</li><li><strong>AI 生成视频脚本</strong>：根据文字提示生成视频脚本。</li><li><strong>AI 翻译</strong>：翻译字幕，轻松制作多语言视频。</li></ul><h3 id="扩图示例-1"><a href="#扩图示例-1" class="headerlink" title="扩图示例"></a>扩图示例</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740024274-0068wHehgy1hydgvsz2q6j30u00xu0zg.jpg.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740024274-0068wHehgy1hydgvsz2q6j30u00xu0zg.jpg.webp" alt="原图"></a></p><p>原图</p><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740024279-Made-with-FlexClip-AI-2025-02-20T120435.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740024279-Made-with-FlexClip-AI-2025-02-20T120435.png.webp" alt="扩图后"></a></p><p>扩图后</p><h3 id="价格说明-1"><a href="#价格说明-1" class="headerlink" title="价格说明"></a>价格说明</h3><p>Clipdrop 注册登录后支持<strong>免费试用</strong>，扩图功能可以免费使用 3 次，下载图片会附带水印。如需更多额度并免水印下载可以考虑购买付费计划。</p><h3 id="3、insMind"><a href="#3、insMind" class="headerlink" title="3、insMind"></a>3、insMind</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740105291-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740105291-image.png.webp" alt="insMind 页面预览"></a></p><p>insMind 页面预览</p><p><a href="https://www.insmind.com/zh-cn/ai-image-expander/">官方网址</a></p><p>insMind 是一款融合了人工智能技术的在线图片编辑平台，专为提升产品图片效果而设计。insMind 不仅支持简化过的传统修图功能，还能利用先进的 AI 技术快速处理图片，提供一系列丰富的 AI 图片编辑功能，例如 AI 画质增强、AI 扩图、AI 滤镜、AI 绘图、AI 抠图、AI 换脸等等，帮助用户快速提升图片质量，简化设计工作流程。insMind 界面直观、易于操作，即使是没有任何设计经验的人，也能在短时间内上手，创造出高质量的设计作品。无论是电商运营、摄影爱好者还是专业设计师，insMind 都能为他们提供一个简便高效的解决方案。</p><h3 id="功能一览-2"><a href="#功能一览-2" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li>AI 扩图</li><li>AI 抠图（支持批量）</li><li>AI 阴影生成</li><li>AI 去阴影</li><li>AI 滤镜</li><li>AI 消除</li><li>AI 绘图</li><li>AI 去水印</li><li>AI 局部涂抹替换</li><li>AI 画质增强</li><li>AI 背景替换</li><li>AI 服装模特</li><li>AI 营销图片生成</li><li>AI 商品图生成</li><li>AI LOGO 生成</li><li>AI 图片轮廓生成</li><li>AI 图片文字替换</li><li>AI 智能排版（尺寸调整）</li><li>AI 换脸</li><li>在线拼图</li><li>海量素材库（包括文字、商品图、插图、贴纸、背景图、海报模板、头像模板）</li></ul><h3 id="扩图示例-2"><a href="#扩图示例-2" class="headerlink" title="扩图示例"></a>扩图示例</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740105202-0068wHehgy1hyi18nfw3gj314014078m.jpg.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740105202-0068wHehgy1hyi18nfw3gj314014078m.jpg.webp" alt="原图"></a></p><p>原图</p><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740105200-0068wHehgy1hyi18nfw3gj314014078m.jpg.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740105200-0068wHehgy1hyi18nfw3gj314014078m.jpg.webp" alt="扩图后"></a></p><p>扩图后</p><h3 id="价格说明-2"><a href="#价格说明-2" class="headerlink" title="价格说明"></a>价格说明</h3><p>insMind 支持<strong>免费试用</strong>，AI 扩图功能支持免费使用，出图带水印可配合站内其他 <a href="https://baozang.io/2450">AI 去水印工具</a>使用。如需解锁完整素材、功能，并获取更多额度可考虑购买付费方案。</p><h3 id="4、Picsart"><a href="#4、Picsart" class="headerlink" title="4、Picsart"></a>4、Picsart</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740114769-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740114769-image.png.webp" alt="Picsart 页面预览"></a></p><p>Picsart 页面预览</p><p><a href="https://picsart.com/ai-image-extender/">官方网址</a></p><p>Picsart 是一款在线图片处理以及设计平台。Picsart 由前沿的 AI 技术赋能，提供诸如 AI 抠图、AI 扩图、AI 绘图、AI 画质增强、AI 背景替换等便捷的智能工具，并针对各个社媒平台的特性提供了由专业设计师原创制作的海量的优质素材和模板，无需任何专业技能，只需简单的点击操作即可快速编辑图片，制作出专业而精美的设计作品，如简历、海报、手幅、名片、传单、视频封面、专辑封面、商品图、LOGO 等，为生产者简化了工作流程并提升了工作效率，适合平面设计、外贸电商、社媒营销、建筑设计、广告营销、餐饮、艺术创作等行业使用。</p><h3 id="功能一览-3"><a href="#功能一览-3" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li>AI 扩图</li><li>AI 绘图</li><li>AI 画质增强</li><li>AI 智能背景</li><li>AI 视频生成</li><li>AI 视频滤镜</li><li>AI GIF 生成</li><li>AI 人脸生成</li><li>AI 清晰化</li><li>AI 旧照片修复</li><li>AI 动漫生成</li><li>AI 锐化图像</li><li>AI 角色生成</li><li>AI 肖像生成</li><li>AI 3D 角色生成</li><li>AI 去像素化</li><li>AI 纹身生成</li><li>AI 图像去噪</li><li>AI 图像转视频</li><li>AI 商品图生成</li><li>AI LOGO 生成</li><li>AI 商品模型演示生成</li><li>AI 草图转化</li><li>AI 滤镜</li><li>AI 头像生成</li><li>AI 贴纸生成</li><li>AI 风格转换</li><li>AI 艺术字生成</li><li>AI 局部替换</li><li>AI 表情包生成</li><li>AI 写作</li><li>AI 标语生成</li><li>AI 简介生成</li><li>AI 报价生成</li><li>AI 字幕生成</li></ul><h3 id="扩图示例-3"><a href="#扩图示例-3" class="headerlink" title="扩图示例"></a>扩图示例</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740114710-istockphoto-1143267822-612x612-1.jpg.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740114710-istockphoto-1143267822-612x612-1.jpg.webp" alt="原图"></a></p><p>原图</p><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740114716-QQ20250221-120943.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740114716-QQ20250221-120943.png.webp" alt="扩图后"></a></p><p>扩图后</p><h3 id="价格说明-3"><a href="#价格说明-3" class="headerlink" title="价格说明"></a>价格说明</h3><p>Picsart 注册登录后支持<strong>免费试用</strong>，每周可获取 5 个积分用于功能使用。如需解锁完整素材、功能，并获取更多额度可考虑购买付费方案，付费方案也提供 7 天试用期，期间可随时取消不收费。</p><h3 id="5、Monica"><a href="#5、Monica" class="headerlink" title="5、Monica"></a>5、Monica</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740123985-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740123985-image.png.webp" alt="Monica 功能页面"></a></p><p>Monica 功能页面</p><p><a href="https://monica.im/zh_CN/image-tools/ai-image-extender">官方网址</a></p><p>Monica 是一款集成了多个最新尖端模型的一站式 AI 助手。在 Monica 中，你可以自由切换 AI 模型，例如 DeepSeek-R1、OpenAI o1、o3-mini、DALL·E 3、Stable Diffusion、Pika Al、Runway AI、Gemini 2.0、Claude 3.5 等，这些 AI 模型可进行多模态生成任务，不仅可以处理文字、文档任务（聊天、搜索、翻译），也能帮你生成并编辑图片、音频、视频，全方位赋能工作与学习，提高效率，让你的工作在 AI 的帮助下既轻松又富有成效。Monica 支持全平台应用，可选择在线使用，也可下载浏览器插件、电脑软件、手机应用配合使用，多端同步数据，打造无缝工作流。</p><p>AI 扩图工具是它所支持的一款在线工具。</p><h3 id="功能一览-4"><a href="#功能一览-4" class="headerlink" title="功能一览"></a>功能一览</h3><p>Monica 支持多种基于不同 AI 模型的功能，下面只列出图片处理相关功能，如需了解更多可点击</p><ul><li>AI 扩图</li><li>AI 图像生成</li><li>AI 视频生成</li><li>AI 图生动画</li><li>AI 图像风格转换</li><li>AI 去水印</li><li>AI 背景移除</li><li>AI 文字移除</li><li>AI 局部移除</li><li>AI 背景替换</li><li>AI 图像放大</li><li>AI LOGO 生成</li><li>AI 像素作品生成</li><li>AI 画质增强</li><li>AI 领英头像生成</li></ul><h3 id="扩图示例-4"><a href="#扩图示例-4" class="headerlink" title="扩图示例"></a>扩图示例</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740105202-0068wHehgy1hyi18nfw3gj314014078m.jpg.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740105202-0068wHehgy1hyi18nfw3gj314014078m.jpg.webp" alt="原图"></a></p><p>原图</p><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740124676-download-1.jpg.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740124676-download-1.jpg.webp" alt="扩图后"></a></p><p>扩图后</p><h3 id="价格说明-4"><a href="#价格说明-4" class="headerlink" title="价格说明"></a>价格说明</h3><p>Monica 支持<strong>免费使用</strong>，支持访问普通模型，每天有 40 次生成额度，可生成 8 张图片。如需获取更多额度可考虑购买付费方案。</p><h3 id="6、Recraft"><a href="#6、Recraft" class="headerlink" title="6、Recraft"></a>6、Recraft</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740125122-image.png.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740125122-image.png.webp" alt="Recraft 首页预览"></a></p><p>Recraft 首页预览</p><p><a href="https://www.recraft.ai/">官方网址</a></p><p>Recraft 是一款在线 AI 图片生成与编辑工具，专为设计工作者打造。Recraft 拥有多种 AI 图像编辑功能，例如 AI 图像生成、AI 图像风格转换、AI LOGO 生成、AI 局部消除、AI 背景移除等等，你可以使用 Recraft 生成风格各异的艺术作品，无论是现实照片还是卡通插画，并且可以利用其他图片编辑功能在线完成全流程设计，整个工作过程无需掌握专业设计技能，操作简便，任何人都能在这里创作出极具创意且质量极佳的艺术设计作品。</p><p>Recraft 深受大厂信赖，与 Netflix、Ogilvy、AIRBUS、HubSpot 等均有合作，目前已在 200 多个国家拥有了 300 万+用户，是一款认可度极高的专业 AI 设计神器。</p><p>它的扩图功能是借助 AI 图像生成功能完成的，因此使用需进行一些前置操作，具体教程可见</p><h3 id="功能一览-5"><a href="#功能一览-5" class="headerlink" title="功能一览"></a>功能一览</h3><ul><li>AI 扩图</li><li>AI 图像生成</li><li>AI 图像矢量化</li><li>AI 矢量图像生成</li><li>AI 模型生成</li><li>AI 画质增强</li><li>AI 背景去除</li><li>AI 局部消除</li></ul><h3 id="扩图示例-5"><a href="#扩图示例-5" class="headerlink" title="扩图示例"></a>扩图示例</h3><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740024274-0068wHehgy1hydgvsz2q6j30u00xu0zg.jpg.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740024274-0068wHehgy1hydgvsz2q6j30u00xu0zg.jpg.webp" alt="原图"></a></p><p>原图</p><p><a href="https://baozang.io/wp-content/uploads/2025/02/1740128397-jpg.jpg.webp"><img src="https://baozang.io/wp-content/uploads/2025/02/1740128397-jpg.jpg.webp" alt="扩图后"></a></p><p>扩图后</p><h3 id="价格说明-5"><a href="#价格说明-5" class="headerlink" title="价格说明"></a>价格说明</h3><p>Recraft 注册登录后支持<strong>免费试用</strong>，每天可获取 50 个积分用于功能使用，一份提示词最多同时生成 2 张图片，且图片生成后即默认为公开作品。</p><p>如需获取更多额度可考虑购买付费方案。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>由于扩图效果较为随机，因此本次推荐的 6 款 AI 扩图软件效果没有明显差距，大家可以对比一下每款工具的免费额度来选择合适的工具。</p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客部署搭建</title>
      <link href="/2025/02/24/ji-zhu-wen-zhang/hexo-bo-ke-da-jian-zhi-nan/"/>
      <url>/2025/02/24/ji-zhu-wen-zhang/hexo-bo-ke-da-jian-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p>欢迎访问我的个人博客，并期待您的友链申请。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://greatsawyer.github.io/imgRepo/img/image-20250224233655764.png"><br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250224235103757.png"><br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250224235156666.png"><br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250224235224905.png"><br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250224235326643.png"></h2><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>为了顺利搭建 Hexo 博客，请确保您已经正确安装了以下工具：</p><ul><li><strong>Git</strong></li><li><strong>Node.js</strong>（推荐使用稳定的 v16 或 v18 版本，避免使用最新的 v22 版本以防止兼容性问题）</li></ul><hr><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p><strong>Windows</strong></p><ol><li>访问官网下载：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>运行安装程序，默认选项一路下一步（建议勾选 <em>Use Git from the Windows Command Prompt</em>）</li><li>安装完成后，打开命令行输入验证：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--version</span></code></pre><p><strong>macOS</strong></p><p>方法一 （ 推荐）使用 Homebrew：</p><pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span></code></pre><p>方法二 下载安装包：<br>官网下载：<a href="https://git-scm.com/download/mac">https://git-scm.com/download/mac</a></p><p>验证安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--version</span></code></pre><p><strong>Linux（Ubuntu/Debian）</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token parameter variable">-y</span><span class="token function">git</span> <span class="token parameter variable">--version</span></code></pre><hr><h3 id="安装-Node-js（含-npm）"><a href="#安装-Node-js（含-npm）" class="headerlink" title="安装 Node.js（含 npm）"></a><strong>安装 Node.js（含 npm）</strong></h3><p><strong>Windows/macOS</strong></p><ol><li>访问官网下载 LTS 版本：<a href="https://nodejs.org/">https://nodejs.org</a></li><li>运行安装程序，默认选项完成安装</li><li>验证安装：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span>  <span class="token comment"># 查看 Node 版本</span><span class="token function">npm</span> <span class="token parameter variable">-v</span>   <span class="token comment"># 查看 npm 版本</span></code></pre><p><strong>macOS（Homebrew 方式）</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">node</span></code></pre><p><strong>Linux（Ubuntu/Debian）</strong></p><ol><li>使用 NodeSource 仓库安装：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://deb.nodesource.com/setup_lts.x <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token parameter variable">-E</span> <span class="token function">bash</span> -<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> nodejs</code></pre><ol start="2"><li>验证：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span> <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token parameter variable">-v</span></code></pre><hr><h3 id="配置-Git-用户信息（首次使用必做）"><a href="#配置-Git-用户信息（首次使用必做）" class="headerlink" title="配置 Git 用户信息（首次使用必做）"></a><strong>配置 Git 用户信息（首次使用必做）</strong></h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的名字"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的邮箱"</span></code></pre><hr><h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a><strong>简单测试</strong></h3><ol><li>新建一个项目文件夹，运行：<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init  <span class="token comment"># 初始化 Git 仓库</span><span class="token function">npm</span> init <span class="token parameter variable">-y</span>  <span class="token comment"># 初始化 Node 项目</span></code></pre></li><li>创建一个 <code>app.js</code> 文件并写入：<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello Git &amp; Node!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>运行脚本：<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> app.js</code></pre></li></ol><hr><h2 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h2><hr><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ol><li>通过以下命令全局安装 Hexo CLI：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span></code></pre><ol start="2"><li>验证安装是否成功：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">hexo <span class="token parameter variable">-v</span></code></pre><p>若出现 Hexo 的版本号，则表示安装成功。</p><hr><h3 id="本地环境初始化"><a href="#本地环境初始化" class="headerlink" title="本地环境初始化"></a>本地环境初始化</h3><ol><li><p><strong>创建博客站点</strong></p><p>在您想要存放博客项目的目录中，依次执行以下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo init myblog<span class="token builtin class-name">cd</span> myblog<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>如果一切正常，您会看到类似如下的提示信息，表明初始化已完成：</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250224235341751.png"></p></li><li><p><strong>项目结构概览</strong></p><p>使用 VSCode 打开 <code>myblog</code> 目录，其主要文件夹和文件包括：</p><ul><li><code>_config.yml</code>: 博客的主要配置文件</li><li><code>source/_posts</code>: 存储博客文章的位置</li></ul></li></ol><hr><h3 id="预览博客"><a href="#预览博客" class="headerlink" title="预览博客"></a>预览博客</h3><p>在项目根目录下运行以下命令来清理缓存、生成静态文件并启动服务器：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo generate <span class="token operator">&amp;&amp;</span> hexo server</code></pre><p>此时，您可以打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 查看本地博客的效果。</p><hr><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>我们推荐使用美观且功能丰富的 <a href="https://fluid-dev.github.io/docs/getting-started/">Fluid</a> 主题。</p><ol><li><p><strong>安装主题</strong></p><p>在博客根目录中执行以下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-theme-fluid</code></pre></li><li><p><strong>配置主题</strong></p><p>创建并编辑 <code>_config.fluid.yml</code> 文件，将其内容从官方提供的模板复制粘贴过来。</p></li><li><p><strong>指定主题</strong></p><p>修改 <code>_config.yml</code> 文件中的 <code>theme</code> 字段为 <code>fluid</code>，同时设置语言选项：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> fluid<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN</code></pre></li><li><p><strong>创建“关于”页面</strong></p><p>运行命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑 <code>/source/about/index.md</code> 文件，确保包含 <code>layout: about</code> 属性。</p></li><li><p><strong>重启服务器</strong></p><p>再次运行：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo generate <span class="token operator">&amp;&amp;</span> hexo server</code></pre><p>浏览器刷新后即可查看新主题的效果。</p></li></ol><hr><h3 id="部署至-GitHub-Pages"><a href="#部署至-GitHub-Pages" class="headerlink" title="部署至 GitHub Pages"></a>部署至 GitHub Pages</h3><ol><li><p><strong>创建 GitHub 仓库</strong></p><p>登录 GitHub 并创建一个新的公共仓库，命名为 <code>&lt;username&gt;.github.io</code>，其中 <code>&lt;username&gt;</code> 替换为您自己的 GitHub 用户名。</p></li><li><p><strong>配置部署信息</strong></p><p>打开博客目录下的 <code>_config.yml</code> 文件，在末尾添加或修改 <code>deploy</code> 模块，填入刚创建的仓库地址：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> &lt;仓库克隆链接<span class="token punctuation">&gt;</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main</code></pre></li><li><p><strong>安装 Git 部署插件</strong></p><p>执行命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span></code></pre></li><li><p><strong>执行部署</strong></p><p>最后一步，运行以下命令完成部署：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo generate <span class="token operator">&amp;&amp;</span> hexo deploy</code></pre><p>成功后，您可以通过 <code>[&lt;username&gt;.github.io](http://&lt;username&gt;.github.io)</code> 访问您的在线博客。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用AI工具生成logo</title>
      <link href="/2025/02/24/ce-ping-wen-zhang/ai-logo-sheng-cheng/"/>
      <url>/2025/02/24/ce-ping-wen-zhang/ai-logo-sheng-cheng/</url>
      
        <content type="html"><![CDATA[<p>最近做博客，需要设计一下网站的logo,就找到这个网站。<strong>强烈推荐！</strong></p><p>👉<strong>网址获取方式</strong>：<br>😝有需要的小伙伴，公众号【<strong>小宇科技酷</strong>】发送关键字【<strong>2025021901</strong>】获取AI logo生成网址</p><p>废话不多说，往下看</p><p><strong>这是主页</strong></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219231858036.png"></p><p>输入<strong>logo主体是什么</strong>?比如<strong>水果，动物，字母，数学符号</strong>等等。在输入logo名称</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219232244289.png"></p><p>点击生成等一会看结果</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219232559190.png"></p><p>可以看到第一个第三个，第四个都不错，结合的比较自然</p><p>哪个想修改可以点击<strong>重新混合</strong>或者<strong>高级编辑</strong></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219233017629.png"></p><p>修改到满意就可以<strong>免费下载</strong>了</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219233059125.png"></p><p><strong>高清套件</strong></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219233120086.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219230647781.png"></p><p><strong>社交媒体套件</strong></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219233147271.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219233206221.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219233218897.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219230948684.png"></p><p><strong>商业logo</strong></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219233243966.png"></p><p><strong>打印logo</strong></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250219233702429.png"></p><p><strong>📢【立即行动，抢占AI先机！】</strong><br>AI时代，<strong>掌握工具者胜</strong>！这份清华团队亲授的“AI圣经”，助你从“被动使用”到“创新驱动”，成为人机协作的领跑者！<strong>限时免费，手慢无！</strong></p><p>👉 <strong>扫码加Q群领取</strong> 👇</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208011213750.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208012043803.png"></p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> logo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepSeek 6平替.md</title>
      <link href="/2025/02/24/ce-ping-wen-zhang/deepseek-ping-ti/"/>
      <url>/2025/02/24/ce-ping-wen-zhang/deepseek-ping-ti/</url>
      
        <content type="html"><![CDATA[<p>最近收到不少粉丝私信，都在吐槽DeepSeek频繁的”服务器繁忙”提示。作为AI界的当红炸子鸡，DeepSeek确实好用但架不住用户太多！不过别担心，这些接入了满血版DeepSeek-R1的国产工具，或许能给你带来意外惊喜——</p><hr><h2 id="01-腾讯元宝-微信生态的AI管家"><a href="#01-腾讯元宝-微信生态的AI管家" class="headerlink" title="01 腾讯元宝 | 微信生态的AI管家"></a><strong>01 腾讯元宝 | 微信生态的AI管家</strong></h2><p><a href="https://yuanbao.tencent.com/">官网直达</a><br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250218232535959.png">作为腾讯出品的AI助手，元宝不仅搭载DeepSeek-R1满血版模型，更独享微信生态的10亿级内容资源。实测单次可解析50份文档（PDF/Word全支持），还能实时抓取公众号最新资讯，写报告查资料简直不要太顺手！</p><hr><h2 id="02-秘塔AI-学术研究者的外挂大脑"><a href="#02-秘塔AI-学术研究者的外挂大脑" class="headerlink" title="02 秘塔AI | 学术研究者的外挂大脑"></a><strong>02 秘塔AI | 学术研究者的外挂大脑</strong></h2><p><a href="https://metaso.cn/">立即体验</a><br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250218232616172.png"><br>专注深度搜索的秘塔AI，结合DeepSeek的推理能力可自动生成带文献引用的分析报告。特别适合论文写作和行业调研，独有的”研究模式”能快速梳理复杂文献的时间线，学术党必备神器！</p><hr><h2 id="03-360纳米搜索-多模型切换专家"><a href="#03-360纳米搜索-多模型切换专家" class="headerlink" title="03 360纳米搜索 | 多模型切换专家"></a><strong>03 360纳米搜索 | 多模型切换专家</strong></h2><p><a href="https://www.n.cn/?fromsou=1">官网入口</a><br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250218232649023.png">聚合16家AI模型的超级工具箱，DeepSeek-R1满血版+360专线双通道保障响应速度。Windows客户端支持离线使用，游戏攻略、视频脚本、会议纪要等场景实测响应速度比官网快3倍！</p><hr><h2 id="04-支付宝百宝箱-隐藏的语音黑科技"><a href="#04-支付宝百宝箱-隐藏的语音黑科技" class="headerlink" title="04 支付宝百宝箱 | 隐藏的语音黑科技"></a><strong>04 支付宝百宝箱 | 隐藏的语音黑科技</strong></h2><p><a href="https://tbox.alipay.com/pro/community">发现入口</a><br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250218232719585.png">藏在支付宝里的宝藏功能！支持语音输入和图片识别，长辈和孩子都能轻松上手。虽然看不到思考过程，但回答质量与官方版无异，买菜算账、旅游攻略等生活场景尤其好用。</p><hr><h2 id="05-天工AI-即开即用的极简派"><a href="#05-天工AI-即开即用的极简派" class="headerlink" title="05 天工AI | 即开即用的极简派"></a><strong>05 天工AI | 即开即用的极简派</strong></h2><p><a href="https://www.tiangong.cn/">快速体验</a><br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250218232747030.png">昆仑万维出品的低调实力派，无需注册直接使用DeepSeek-R1满血版。适合需要快速获取答案的职场场景，生成周报、整理会议纪要等基础办公需求响应速度稳定在2秒内。</p><hr><p><strong>✨使用小贴士</strong><br>建议根据需求组合使用：学术研究首选秘塔AI+腾讯元宝，生活场景用支付宝百宝箱，多任务处理选360纳米搜索。你还发现哪些好用的AI工具？欢迎在评论区交流分享！</p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepSeek使用技巧</title>
      <link href="/2025/02/24/ce-ping-wen-zhang/deepseek-shi-yong-ji-qiao/"/>
      <url>/2025/02/24/ce-ping-wen-zhang/deepseek-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208013303579.png"></p><p><strong>从 DeepSeek R1 发布的那天起，我就开始写文章介绍它，没想到最近几天它竟然火爆到这种程度。</strong></p><p>不过，当我翻看评论区时，发现许多朋友并没有充分发挥 DeepSeek R1 的潜力。作为一名深度用户，我真是看得着急啊。</p><p>于是赶紧写下这篇文章，分享一些实用技巧和案例，希望能帮助大家更好地使用 DeepSeek R1，让它成为你工作和生活中的得力助手。</p><p>其实最开始接触 DeepSeek 的时候，我也只是觉得它和市面上其他工具没什么两样。但用了几次之后,才发现它能极大地提升工作和生活效率。说实话，这些技巧我以前也不知道，直到我花时间探索和总结下来，感觉就像打开了新世界的大门一样。下面就把我亲身试验后发现的几个干货和注意事项，跟大家唠唠嗑，保证你看完也能变身 DeepSeek 高手。</p><hr><h3 id="DeepSeek-的使用方式"><a href="#DeepSeek-的使用方式" class="headerlink" title="DeepSeek 的使用方式"></a><strong>DeepSeek 的使用方式</strong></h3><p>为了照顾一些刚接触 DeepSeek 的新手朋友，我先简单介绍一下如何使用它。如果你已经是熟练用户，可以直接跳过这一部分。</p><p>目前，DeepSeek 提供以下几种主要的使用方式：</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208020204796.png"></p><ol><li><strong>网页版</strong>：直接打开 <a href="https://chat.deepseek.com/">https://chat.deepseek.com/</a> 即可使用。</li><li><strong>App版</strong>：通过手机扫码下载应用程序。</li></ol><p>默认情况下，DeepSeek 使用的是 V3 模型。如果需要切换到让人惊艳的 R1 模型，只需点击“<strong>深度思考</strong>”按钮。此外，还有一个“<strong>联网搜索</strong>”功能，默认情况下 DeepSeek 使用的是几个月前的训练数据。如果你需要参考最新新闻或动态，可以启用联网搜索，让 DeepSeek R1 基于最新的网络数据回答问题。</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208020431851.png"></p><hr><h3 id="基础技巧"><a href="#基础技巧" class="headerlink" title="基础技巧"></a><strong>基础技巧</strong></h3><h4 id="直接提需求"><a href="#直接提需求" class="headerlink" title="直接提需求"></a><strong>直接提需求</strong></h4><p>首先，我们需要了解 DeepSeek R1 与其他主流大模型（如 GPT）之间的区别。GPT 等模型属于<strong>指令型大模型</strong>，它们需要用户提供详细的操作流程，才能给出令人满意的回答。例如，如果你想让 GPT 扮演一位中国老师鼓励学生参加竞赛，你需要提供类似以下的提示词：</p><blockquote><p>“请你扮演一名老师，用鼓舞人心的语气劝说学生参加数学竞赛，告诉他竞赛的重要性，并分享几个他可能从竞赛中获得的好处，比如提升逻辑思维能力、结交志同道合的朋友等。”</p></blockquote><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208020549706.png"></p><p>这样的提示词不仅需要描述具体情境（比如“扮演老师”），还需要提供额外的细节（如“提升逻辑思维能力”）。因此，在 ChatGPT 流行的时期，甚至出现了专门设计指令的岗位——提示词工程师。</p><p>而 DeepSeek R1 则属于<strong>推理型大模型</strong>，它不需要用户提供详细的流程。相反，过于详细的提示可能会限制其发挥。根据 DeepSeek 官方论文的说明，R1 模型对提示词非常敏感。为了获得最佳效果，建议用户<strong>直接描述问题</strong>即可。</p><p>举个例子，当你想让 DeepSeek 写出一位创业者在公司面临巨大危机时的内心独白，你只需简单描述问题：</p><blockquote><p>“写出一位创业者在公司连续亏损三个月后，面对员工和投资人的压力时的内心独白。”</p></blockquote><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208020721803.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208020741115.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208020805813.png"></p><p>DeepSeek R1 的回答往往会比其他模型更具戏剧性和画面感。相较于其他模型的中规中矩，DeepSeek R1 更注重细节和创造性输出。</p><p>因此，在使用 DeepSeek R1 时，我们可以把自己想象成老板，DeepSeek R1 是我们雇佣的专业助手。我们只需提出需求，剩下的工作就交给它完成。</p><hr><h3 id="万能提问模板"><a href="#万能提问模板" class="headerlink" title="万能提问模板"></a><strong>万能提问模板</strong></h3><p>虽然直接提问题已经能够得到不错的答案，但如果在提问时加入“<strong>背景描述</strong>”，效果会更好。背景描述包括以下内容：</p><ul><li>我是谁（如：我是一个大学生）。</li><li>我的当前水平（如：我是编程初学者）。</li><li>我希望 DeepSeek 扮演的角色（如：你是一名资深程序员）。</li></ul><p>此外，如果回答不符合预期，可以增加一些<strong>约束条件</strong>，进一步优化输出内容。例如：</p><blockquote><p>“我是大学生（背景），怎样用 Python 写一个简单的贪吃蛇游戏（需求），代码尽量简洁明了（约束条件）。”</p></blockquote><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208020913194.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208020953714.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208021007300.png"></p><p>通过这种方式，DeepSeek R1 不仅能够提供详细的代码示例，还会附上运行步骤和注意事项。如果你希望它的回答更加具体，还可以进一步要求它详细展开某一部分内容。</p><p>总结来说，一个简单的提问模板是：<br> <strong>背景 + 需求 + 约束条件（可选）</strong>。</p><hr><h3 id="让-DeepSeek-“说人话”"><a href="#让-DeepSeek-“说人话”" class="headerlink" title="让 DeepSeek “说人话”"></a><strong>让 DeepSeek “说人话”</strong></h3><p>在处理一些专业问题时，DeepSeek 的回答可能会使用大量专业术语。如果你是相关领域的专业人士，这些术语可能会帮助你快速理解问题。但如果你对该领域不熟悉，这些术语可能会让人感到晦涩难懂。</p><p>这种情况下，你只需在提示词中加入“<strong>用大白话解释</strong>”、“通俗易懂”、“说人话”等要求，就能让 DeepSeek 给出更易理解的答案。</p><p>例如，当我问 DeepSeek “为什么它的运行速度这么快”时，原回答可能充满了技术术语。而在加入“用大白话解释”后，DeepSeek 会用生动的比喻将复杂的概念转化为通俗易懂的语言，让人一听就懂。</p><hr><h3 id="模仿回答"><a href="#模仿回答" class="headerlink" title="模仿回答"></a><strong>模仿回答</strong></h3><p>DeepSeek 的另一个强大功能是模仿能力。通过提示词如“模仿 X 的语气”或“以 X 的口吻”，你可以让 DeepSeek 模仿特定人物、风格或语气回答问题。</p><p>例如，你可以让它模仿一位大学教授，用严谨的逻辑分析某个学术问题；或者模仿一位美食博主，用轻松幽默的语气推荐一道家常菜。甚至可以让它模仿古代诗人，为你写一首描述春天的诗。</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208021056065.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208021136646.png"></p><hr><h3 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a><strong>高级技巧</strong></h3><h4 id="多模型组合"><a href="#多模型组合" class="headerlink" title="多模型组合"></a><strong>多模型组合</strong></h4><p>对于复杂场景，可以结合 DeepSeek R1 与 GPT-4o 或 Claude 3.5 等模型的优势。例如，先用 DeepSeek R1 提出问题解决方案，再用指令型大模型生成具体的内容。</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208021416535.png"></p><p>拿到这个提示词后，我们再找个 AI 出图工具就能得到图片了。</p><p>一般来说，英文提示词的效果会优于中文提示词，所以我一般都是让 DeepSeek 直接生成英文提示词。这个组合蛮适合帮我们生成漫画图、文章封面图，甚至制作视频。这里再推荐几个常用生图的 AI 工具：</p><ol><li>即梦 AI：<a href="https://jimeng.jianying.com/ai-tool/image/generate">https://jimeng.jianying.com/ai-tool/image/generate</a></li><li>Midjourney: <a href="http://www.midjourney.com/">www.midjourney.com/</a></li><li>ChatGPT、豆包等大模型。</li></ol><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208021524051.png"></p><h4 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a><strong>业务分析</strong></h4><p>通过“联网搜索”，DeepSeek 可以实时获取最新信息，甚至通过上传附件来精准分析数据。这使得它非常适合用来制定策略或进行数据分析。以内容创作为例，你可以让 DeepSeek 分析某个平台的热门账号，并生成详细的运营计划。</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208021729703.png"></p><p>搜索有来源</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208021748934.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208021812297.png"></p><hr><h3 id="DeepSeek-的局限性"><a href="#DeepSeek-的局限性" class="headerlink" title="DeepSeek 的局限性"></a><strong>DeepSeek 的局限性</strong></h3><p>尽管 DeepSeek 强大，但它在以下几类问题上仍有局限：</p><h5 id="1-实时性与知识时效性"><a href="#1-实时性与知识时效性" class="headerlink" title="1. 实时性与知识时效性"></a>1. <strong>实时性与知识时效性</strong></h5><ul><li><strong>知识截止日期</strong>：模型的训练数据通常截止到特定时间（例如2023年12月），无法获取此后的事件、政策或技术更新（如2024年的新闻或科研成果）。</li><li><strong>实时信息缺失</strong>：无法直接查询动态信息（如实时天气、股市行情、最新社交媒体动态），需依赖外部接口补充。</li></ul><h5 id="2-领域专业深度不足"><a href="#2-领域专业深度不足" class="headerlink" title="2. 领域专业深度不足"></a>2. <strong>领域专业深度不足</strong></h5><ul><li><strong>泛化与专精的平衡</strong>：虽然能覆盖多领域知识，但在高度专业化的领域（如尖端医学、量子物理）可能缺乏深度，回答易停留在科普层面。</li><li><strong>行业经验依赖</strong>：对依赖实践经验的领域（如法律案件具体操作、临床诊断）可能给出理论建议，但无法替代专业人士判断。</li></ul><h5 id="3-逻辑推理与复杂任务的局限性"><a href="#3-逻辑推理与复杂任务的局限性" class="headerlink" title="3. 逻辑推理与复杂任务的局限性"></a>3. <strong>逻辑推理与复杂任务的局限性</strong></h5><ul><li><strong>多步推理容错率低</strong>：在复杂数学证明、编程调试或长链条逻辑推演中，可能出现中间步骤错误，需用户自行验证。</li><li><strong>上下文理解限制</strong>：超长对话中可能遗忘早期细节，或对模糊表述产生歧义（例如代词指代不明确时）。</li></ul><h4 id="4-多模态处理能力"><a href="#4-多模态处理能力" class="headerlink" title="4. 多模态处理能力"></a>4. <strong>多模态处理能力</strong></h4><ul><li><strong>文本为主</strong>：当前版本（以文本交互为核心）无法直接处理图片、音频、视频内容（需依赖附加工具解析）。</li><li><strong>生成内容可控性</strong>：虽能生成代码、文案等，但格式或风格可能需多次调整（例如特定排版需求）。</li></ul><h5 id="5-伦理与数据偏见风险"><a href="#5-伦理与数据偏见风险" class="headerlink" title="5. 伦理与数据偏见风险"></a>5. <strong>伦理与数据偏见风险</strong></h5><ul><li><strong>隐性偏见</strong>：训练数据中隐含的社会文化偏见可能影响回答（如性别角色刻板印象），尽管已通过算法优化减少此类问题。</li><li><strong>价值观对齐</strong>：对涉及伦理争议的问题（如政治敏感话题）可能回避或提供标准化回复，而非个性化观点。</li></ul><h5 id="6-创造力与情感交互"><a href="#6-创造力与情感交互" class="headerlink" title="6. 创造力与情感交互"></a>6. <strong>创造力与情感交互</strong></h5><ul><li><strong>创意内容模板化</strong>：生成的诗歌、故事等创意文本可能缺乏人类作家的情感深度或创新突破。</li><li><strong>情感理解局限</strong>：能模拟共情表达（如安慰用户），但本质是基于模式识别，无真实情感体验。</li></ul><h5 id="7-资源依赖与使用门槛"><a href="#7-资源依赖与使用门槛" class="headerlink" title="7. 资源依赖与使用门槛"></a>7. <strong>资源依赖与使用门槛</strong></h5><ul><li><strong>算力与响应速度</strong>：复杂任务需较高计算资源，可能导致响应延迟（尤其在高峰期）。</li><li><strong>网络依赖性</strong>：离线环境无法使用，且对网络稳定性要求较高。</li></ul><hr><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h3><p>从去年 ChatGPT 的爆火到现在 DeepSeek R1 的横空出世，AI 正在以惊人的速度渗透进我们的生活。就像我们如今离不开智能手机一样，未来十年，AI 也将成为我们生活中不可或缺的一部分。</p><p>希望这篇文章能帮助你更好地使用 DeepSeek。如果觉得有用，欢迎分享给家人朋友，让更多人受益于 AI 工具的便利！另外，我还整理了一些实用的 DeepSeek 资料，免费分享给大家，感兴趣的朋友可以关注获取！</p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Midreal-AI写小说.md</title>
      <link href="/2025/02/24/ce-ping-wen-zhang/midreal-ai-xie-xiao-shuo/"/>
      <url>/2025/02/24/ce-ping-wen-zhang/midreal-ai-xie-xiao-shuo/</url>
      
        <content type="html"><![CDATA[<p>今天给大家分享的Midreal AI是一款由<a href="https://so.csdn.net/so/search?q=MIT&amp;spm=1001.2101.3001.7020">MIT</a>、NYU、剑桥、普林斯顿联合打造的AI生成小说产品。我个人认为，这绝对是针对普通网文作者的降维打击！我自己体验了一下，不得不说真的非常nice。</p><p>话不多说开始上图，主页是暗黑风格</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250213004721759.png"></p><p>随便输入一个小说的开头，会自动起个书名</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250213223758028.png"></p><p>会自动生成小说的主要人物以及画像</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250213224025698.png"></p><p>点击人物照片可以进行对话</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250213224352942.png"></p><p>每次生成一段文字之后会让你自己决定剧情走向</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250213224604429.png"></p><p>剧情会自动配图</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250213224845472.png"></p><p>最后每天有免费额度</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250213224737232.png"></p><p>我生成的故事完整版如下：</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250213225027958.png"></p><p>下面是我自己对MidReal的总结。  </p><ul><li>Midreal AI的核心竞争力在于其前沿技术，尤其是<strong>内存跨越技术和长篇写作能力</strong>。</li><li>解决了以往文本互动游戏中连贯性难以维持的问题。该技术能够实现近乎无限的记忆保留，确保故事线连贯无缝，提供用户一个持久的故事体验。</li><li>不仅是小说生成器，Midreal AI能够根据用户输入生成引人入胜的长篇故事。这在大型语言模型中是罕见的，展示了其在文本生成、故事构架和情节发展上的深度理解。</li><li>目前支持英文和中文，未来还将添加更多语言，包括日语。这使得Midreal AI能够跨越语言障碍，服务更广泛的用户群体。</li><li>不仅是游戏或小说生成器，Midreal AI是一个全新的故事叙述平台，为用户提供前所未有的创造空间和自由度。通过创新技术，Midreal AI不仅改变了用户与故事互动的方式，也在人工智能领域中开创了新的可能性。</li><li>适用于游戏玩家、小说爱好者、电视剧和电影迷，以及同人小说创作者，为他们提供一个无限创造的空间。</li></ul><p>👉<strong>网址获取方式</strong>：<br>😝有需要的小伙伴，公众号【<strong>小宇科技酷</strong>】发送关键字【<strong>2025021301</strong>】获取Midreal网址<br>公众号点击【<strong>加我微信</strong>】拉你进入<strong>副业、AI交流群</strong>，群内经常<strong>分享副业经验</strong>，<strong>AI赋能副业提升效率</strong>的案例</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250208011213750.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250228015726922.png" alt="image-20250228015726922"></p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知乎直答DeepSeek-R1</title>
      <link href="/2025/02/24/ce-ping-wen-zhang/zhi-hu-zhi-da-deepseek-r1/"/>
      <url>/2025/02/24/ce-ping-wen-zhang/zhi-hu-zhi-da-deepseek-r1/</url>
      
        <content type="html"><![CDATA[<p><strong>今日（2025年2月11日）</strong>，知乎旗下AI搜索产品“知乎直答”宣布重磅升级——正式接入“满血版”DeepSeek-R1模型！这一结合不仅标志着AI搜索能力的全面革新，更开启了“专业知识库×顶级推理能力”的智能新纪元。</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250211222738504.png" alt="image-20250211222738504"></p><hr><p>DeepSeek-R1作为国内顶尖大模型，以<strong>超强逻辑推演能力</strong>和<strong>结构化输出</strong>著称。其独特之处在于：</p><ul><li><strong>跳过监督微调（SFT）</strong>：通过强化学习（RL）技术，仅凭少量人工标注数据实现推理能力的自我进化；</li><li><strong>“尤里卡时刻”涌现</strong>：在训练中，模型甚至展现类似人类的反思行为，主动延长思考时间以优化解决方案；</li><li><strong>专业领域超越OpenAI</strong>：在工程代码（SWE-Bench）、数学竞赛（AIME 2024）等场景中表现优于OpenAI o1模型。</li></ul><p>此次接入后，知乎直答将依托<strong>5000万+中英文文献</strong>及社区优质语料，让搜索结果更精准、解答逻辑更严密。</p><hr><h3 id="1-知识库功能上线：打造你的“第二大脑”"><a href="#1-知识库功能上线：打造你的“第二大脑”" class="headerlink" title="1. 知识库功能上线：打造你的“第二大脑”"></a><strong>1. 知识库功能上线：打造你的“第二大脑”</strong></h3><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250211222602010.png" alt="image-20250211222602010"></p><p>同步推出的“知识库”功能，堪称知识工作者的效率神器：</p><ul><li><strong>多源整合</strong>：支持本地文件、网页收藏、RSS订阅、知乎收藏夹一键导入；</li><li><strong>智能分析</strong>：通过DeepSeek-R1快速提取论文、文档中的核心信息，生成结构化摘要；</li><li><strong>个性化管理</strong>：用户可分类存储、标签化检索，构建专属知识体系。</li></ul><p>无论是学术研究还是行业报告，这一功能将碎片化信息转化为系统化资产，真正实现“知识即战力”。</p><hr><h3 id="2-用户体验升级：从“搜索答案”到“获得洞察”"><a href="#2-用户体验升级：从“搜索答案”到“获得洞察”" class="headerlink" title="2. 用户体验升级：从“搜索答案”到“获得洞察”"></a><strong>2. 用户体验升级：从“搜索答案”到“获得洞察”</strong></h3><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250211224856143.png" alt="image-20250211224856143"></p><ul><li><strong>通用搜索</strong>：日常问题解答更流畅，例如“如何用Python实现图像识别？”模型会分步骤拆解代码逻辑；</li><li><strong>专业搜索</strong>：深度解析学术论文、技术文档，例如输入“量子计算最新进展”，可获分领域综述与关键论文推荐；</li><li><strong>溯源增强</strong>：所有结果均标注来源，确保信息可信度1。</li></ul><hr><h3 id="3-市场反响热烈：知乎股价单日暴涨15"><a href="#3-市场反响热烈：知乎股价单日暴涨15" class="headerlink" title="3. 市场反响热烈：知乎股价单日暴涨15%"></a><strong>3. 市场反响热烈：知乎股价单日暴涨15%</strong></h3><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250211222853492.png" alt="image-20250211222853492"></p><p>消息发布后，知乎港股（02390.HK）收盘大涨15.01%，美股（ZH.US）前一日涨幅亦超15%5。市场普遍认为，此次合作标志着知乎从“内容社区”向“AI+知识服务”的转型迈出关键一步，未来或通过广告、企业服务等模式拓展商业化空间。</p><p>当知乎的优质内容遇上DeepSeek-R1的顶级推理，AI搜索不再是简单的信息匹配，而是<strong>深度知识服务</strong>的开始。无论是学生、研究者，还是职场人，都能在这场智能革命中，更高效地获取价值、创造价值。</p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信接入deepseek.md</title>
      <link href="/2025/02/24/re-dian-wen-zhang/wei-xin-jie-ru-deepseek/"/>
      <url>/2025/02/24/re-dian-wen-zhang/wei-xin-jie-ru-deepseek/</url>
      
        <content type="html"><![CDATA[<p>2月15日起，部分用户发现搜索框<strong>惊现神秘入口</strong>——点击对话框顶部的搜索栏，即可解锁全新”AI搜索”功能。此次更新最大的亮点在于接入了深度求索（DeepSeek）最新研发的R1大模型，通过”深度思考”模式为用户提供多维度的智能服务。</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250217225729638.png"></p><p>据实测，已获得测试资格的用户在搜索框输入问题时，系统会进行长达30秒的深度推理，<strong>整合微信公众号、视频号等生态内容，同时实时抓取全网最新资讯</strong>。有用户尝试询问”如何用微信预约故宫门票”，不仅获得分步骤指引，还同步展示了官方预约通道和近期参观攻略。</p><p>值得关注的是，DeepSeek生态正在全球范围快速扩张。数据显示，已有包括三大通信运营商、15家芯片制造商、200余家科技企业在内的行业巨头加入合作阵营。更引人注目的是，微软Azure、英伟达CUDA平台等国际技术领军者已宣布完成系统适配，为后续全球化应用铺路。</p><p>目前该功能仍处于分批开放阶段，建议同时关注微信更新提示和腾讯元宝的版本推送。随着计算集群的持续扩容，预计3月初将实现全量用户覆盖，<strong>这场由大模型驱动的智能革命正在重新定义移动互联网的搜索体验</strong>。</p><p>据介绍，此次接入DeepSeek的微信AI搜索功能，<strong>不仅整合了微信公众号等腾讯生态内的信息源，还支持联网搜索，能为用户提供更全面、实时、准确的回答</strong>。</p><p>目前，<strong>该功能正灰度测试中，仅部分用户可体验</strong>。未获得测试资格的用户可通过下载**“腾讯元宝”**App，<strong>免费使用DeepSeek-R1满血版</strong>。</p><p>腾讯元宝APP版直接在手机应用商店搜索即可下载</p><p>下载后打开后页面很干净，和原生deepseek一样</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250217223549830.png"></p><p>点击最上方可以切换到deepseek推理模型</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250217223658814.png"></p><p>不过使用混元模型的数据是很多是来自于微信公众号的高质量，如果想搜索微信公众号文章建议使用混元模型</p><p>点击左上方抽屉按钮可以看到<strong>全部应用</strong></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250217223901435.png"></p><p>全部应用中有很多工具可以使用，比如图像，视频等工具，这点是在deepseek功能基础是做了增强</p><p><img src="C:\Users\hsy\AppData\Roaming\Typora\typora-user-images\image-20250217224159782.png"></p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用deepseek逆袭.md</title>
      <link href="/2025/02/24/re-dian-wen-zhang/yong-deepseek-ni-xi/"/>
      <url>/2025/02/24/re-dian-wen-zhang/yong-deepseek-ni-xi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250223000105077.png"> </p><p><strong>第一批用DeepSeek的人已经偷偷买房买车，而你还在问“这是什么”？</strong>  </p><hr><p><strong>你刷到这条推送的时候，已经有2000个普通人靠DeepSeek月入过万了！</strong><br>这不是危言耸听。2025年2月，国产AI工具DeepSeek以“碾压级”性能横扫全网，朋友圈、抖音、小红书全被它刷屏。但更可怕的是——<strong>有人用它4天狂赚20万</strong>，有人靠它清空库存、卖爆全球，甚至有人连初中都没毕业，却通过倒卖DeepSeek教程年入百万。  </p><p>而你，还在纠结“AI会不会抢我饭碗”？<br><strong>醒醒吧！</strong><br>这世上最残酷的差距，不是“用不用AI”，而是“有人用AI赚你的钱，而你只会刷短视频”。  </p><hr><h3 id="一、DeepSeek凭什么能让你暴富？"><a href="#一、DeepSeek凭什么能让你暴富？" class="headerlink" title="一、DeepSeek凭什么能让你暴富？"></a>一、DeepSeek凭什么能让你暴富？</h3><p><strong>1. 技术红利：一场“零门槛”的财富洗牌</strong><br>DeepSeek的恐怖之处，在于它彻底打破了“技术垄断”。  </p><ul><li><strong>写文案</strong>：输入关键词，10秒生成100条爆款标题；</li></ul><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250222234734557.png"></p><ul><li><strong>做视频</strong>：拍一段“12345”口播，AI自动翻译36国语言；</li></ul><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250222235305510.png"></p><ul><li><strong>搞数据</strong>：分析市场趋势、预测爆款，连特朗普关税政策都能提前规避。</li></ul><p><strong>2. 财富真相：信息差就是印钞机</strong><br>你以为技术透明了就能公平竞争？大错特错！  </p><ul><li><strong>案例1</strong>：某博主将去年ChatGPT课程文案里的“GPT”替换成“DeepSeek”，同一套话术，3天收割30万；  </li><li><strong>案例2</strong>：闲鱼上一份标价9.9元的“DeepSeek提示词大全”，被1000多人疯抢；  </li><li><strong>真相</strong>：80%的人连DeepSeek官网都没打开过，这就是你赚钱的机会！</li></ul><hr><h3 id="二、普通人用DeepSeek搞钱的6大野路子（亲测有效）"><a href="#二、普通人用DeepSeek搞钱的6大野路子（亲测有效）" class="headerlink" title="二、普通人用DeepSeek搞钱的6大野路子（亲测有效）"></a>二、普通人用DeepSeek搞钱的6大野路子（亲测有效）</h3><p><strong>方法1：自媒体矩阵——躺着赚流量钱</strong><br><strong>操作指南</strong>：  </p><ul><li><strong>爆款标题</strong>：用DeepSeek输入“2025赚钱焦虑”，生成《35岁失业，我用AI月入3万：有些钱，活该你赚不到》；  </li><li><strong>批量生产</strong>：1分钟生成小红书笔记模板，新号春节涨粉过万；  </li><li><strong>变现路径</strong>：流量主广告+带货佣金+私域卖课，月入2万只是底线。</li></ul><p><strong>“你熬夜写稿时，00后大学生用AI一天发100条笔记，平台算法都追着他喂流量！”</strong>  </p><p><strong>方法2：知识付费——割韭菜？不，这是“认知税”</strong><br><strong>暴利真相</strong>：  </p><ul><li>卖课：录制一段“DeepSeek写朋友圈文案”教程，挂载知识星球分销，每单躺赚11元；  </li><li>社群：建个199元/年的微信群，每天发3条AI技巧，6000人付费=净赚120万；  </li><li><strong>核心逻辑</strong>：信息差永不过时，总有人连Ctrl+C/V都不会。</li></ul><p><strong>“你嘲笑别人交‘智商税’时，聪明人早已靠‘信息差税’买了第二套房。”</strong>  </p><p><strong>方法3：跨境带货——义乌老板的“印钞密码”</strong><br><strong>案例复盘</strong>：  </p><ul><li>义乌老板娘傅江燕用DeepSeek生成多语种带货视频，10分钟制作→日均卖空2000万双袜子；  </li><li><strong>秘诀</strong>：AI自动适配中东文化禁忌、拉美音乐偏好，连“特朗普加税”都能提前预警。</li></ul><p><strong>“你还在和国内同行卷价格，有人已用AI收割全球</strong>——<strong>世界那么大，但暴富窗口只开3个月</strong>。”  </p><p><strong>方法4：数字人直播——24小时“印钞流水线”</strong><br><strong>技术组合</strong>：  </p><ul><li>DeepSeek写脚本 + 小娃数字人出镜，3分钟生成一条带货视频；  </li><li>某家居店实测：30天销售额从5万飙到20万，成本仅299元/月。</li></ul><p><strong>“请主播？写脚本？剪视频？——2025年了，你还在用‘人肉电池’模式创业？”</strong>  </p><p><strong>方法5：数据选品——抢占下一个“爆款风口”</strong><br><strong>实操案例</strong>：  </p><ul><li>用DeepSeek分析TikTok热词，提前囤货“奥运冠军同款发夹”，亚马逊Prime Day狂销10万单；  </li><li><strong>黑科技</strong>：输入“2025夏季流行元素”，AI直接输出《欧美Z世代爆款预测报告》。</li></ul><p><strong>“你凭直觉选品时，对手用AI预判了你的预判</strong>——<strong>商业战场上，迟钝一秒，库存压十年</strong>。”  </p><p><strong>方法6：私域变现——朋友圈成“提款机”</strong><br><strong>暗黑玩法</strong>：  </p><ul><li>用DeepSeek批量生成“焦虑文案”：“35岁被裁员，靠AI逆袭：你的稳定，正在杀死你”；  </li><li>配合数字人打造“创业导师”人设，私域转化率提升80%。</li></ul><p><strong>“你屏蔽微商时，高手用AI把朋友圈变成了自动提款机——不是生意难做，是你的思维还停在2015。”</strong>  </p><hr><h3 id="三、警告！DeepSeek搞钱的3大陷阱"><a href="#三、警告！DeepSeek搞钱的3大陷阱" class="headerlink" title="三、警告！DeepSeek搞钱的3大陷阱"></a>三、警告！DeepSeek搞钱的3大陷阱</h3><p><strong>1. 假教程横行：你交的学费，正在养活“赛博乞丐”</strong>  </p><ul><li>案例：199元买的“AI绘画课”，实为某软件广告；  </li><li>破解法：只学官方免费教程，警惕“三天精通”“躺赚秘籍”。</li></ul><p><strong>2. 伪需求幻觉：AI是杠杆，但你需要支点</strong>  </p><ul><li>真相：DeepSeek+数字人带货很火，但如果你连选品都不会，AI只会放大你的亏损；  </li><li>忠告：先跑通最小盈利闭环，再上AI加速器。</li></ul><p><strong>3. 政策雷区：这些钱，赚了也得吐出来</strong>  </p><ul><li>风险：用AI生成虚假宣传视频，已被市监局列入2025年重点打击名单；  </li><li>红线：金融、医疗、教育等领域，AI工具使用需备案。</li></ul><hr><h3 id="四、立即行动！抓住红利期的最后3步"><a href="#四、立即行动！抓住红利期的最后3步" class="headerlink" title="四、立即行动！抓住红利期的最后3步"></a>四、立即行动！抓住红利期的最后3步</h3><p><strong>1. 抢占生态位（24小时内完成）</strong>  </p><ul><li>注册DeepSeek账号，用“搞钱”“副业”等关键词生成100条内容模板；  </li><li>立刻发布到小红书/视频号，标签加#DeepSeek暴富攻略。</li></ul><p><strong>2. 打造变现闭环（3天见收益）</strong>  </p><ul><li>选择1个平台主攻（推荐小红书+私域）；  </li><li>用AI生成《2025年AI搞钱手册》，定价9.9元，当天回本。</li></ul><p><strong>3. 放大规模（1个月躺赚）</strong>  </p><ul><li>招募分销团队：每单分佣50%，让大学生、宝妈替你卖课；  </li><li>矩阵号操作：10个账号铺量，总有一个爆款。</li></ul><hr><p><strong>“看完这篇文章还无动于衷的人，注定被时代抛弃！<br>——因为当AI开始替代工作时，聪明人早已用AI替代了‘赚钱’本身。”</strong>  </p><p><strong>立即扫码关注，免费领取</strong>：<br>①《DeepSeek搞钱实操手册》（含50个暴利项目）；  </p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250222223336418.png"></p><p>②  加微验证发私信暗号“逆袭”，拉你进2025年AI搞钱内测群（仅限前500人）。   </p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250222235219395.png"></p><p><strong>记住：</strong><br>第一批用淘宝的人身家过亿，<br>第一批玩抖音的人别墅靠海，<br>而2025年，<strong>所有暴富故事只会属于DeepSeek玩家</strong>。<br><strong>你，还要错过多少次时代红利？</strong>  </p><hr><p><strong>另外本人精心整理的清华弹deepseek资料，免费送给大家</strong>！</p><p><strong>相关资料获取方式：</strong></p><p>第一步：点亮本文，【<strong>点赞+在看</strong>】</p><p>第二步：<strong>公众号</strong>发送【20250223】即可获取</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250223000744307.png"></p>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清华DeepSeek从入门到精通.md</title>
      <link href="/2025/02/24/zi-liao-wen-zhang/qing-hua-deepseek-cong-ru-men-dao-jing-tong/"/>
      <url>/2025/02/24/zi-liao-wen-zhang/qing-hua-deepseek-cong-ru-men-dao-jing-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="清华104页DeepSeek“黑科技”手册流出！写代码、做爆款、搞数据，打工人速存！"><a href="#清华104页DeepSeek“黑科技”手册流出！写代码、做爆款、搞数据，打工人速存！" class="headerlink" title="清华104页DeepSeek“黑科技”手册流出！写代码、做爆款、搞数据，打工人速存！"></a><strong>清华104页DeepSeek“黑科技”手册流出！写代码、做爆款、搞数据，打工人速存！</strong></h1><p><strong>🌟【重磅福利！清华团队打造AI“秘籍”】</strong><br>还在为如何高效使用DeepSeek发愁？清华大学新闻与传播学院元宇宙文化实验室余梦珑博士后团队<strong>权威出品</strong>《DeepSeek：从入门到精通》！这份104页的<strong>AI学习宝典</strong>，从零基础到高阶技巧全覆盖，助你解锁国产AI工具的全部潜能！无需付费、无需套路，<strong>关注公众号【小宇科技酷】发送关键字【清华deepseek】免费领</strong>，开启你的智能进阶之路。</p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250212221523690.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250212221547276.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250212221753758.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250212221811433.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250212221823110.png"></p><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250212221833553.png"></p><hr><p><strong>📚【手册核心亮点】</strong><br>1️⃣ <strong>权威深度，拒绝“水货”</strong></p><ul><li>由清华团队耗时数月打磨，<strong>系统解析DeepSeek的底层逻辑</strong>，包括模型架构、推理机制、多模态处理等核心技术，远超市面“说明书式”教程。</li><li><strong>独家方法论</strong>：独创“SPECTRA任务分解法”“三链融合模型”，教你如何用AI解决复杂任务，告别“生成即废稿”的尴尬。</li></ul><p>2️⃣ <strong>实战为王，秒变AI高手</strong></p><ul><li><strong>文本创作</strong>：从营销文案到学术摘要，教你用一句话生成爆款内容；</li><li><strong>代码辅助</strong>：Python代码自动生成、调试优化，开发者效率提升50%；</li><li><strong>数据分析</strong>：上传Excel秒出趋势报告，手写笔记也能转结构化数据；</li><li><strong>多语言翻译</strong>：告别机翻尴尬，本地化表达精准适配。</li></ul><p>3️⃣ <strong>避坑指南，拒绝AI“幻觉”</strong></p><ul><li>揭秘AI生成内容的常见误区，提供<strong>幻觉规避技巧</strong>，确保输出结果真实可靠；</li><li>提示词设计“黄金法则”：从“简洁指令”到“结构化引导”，让AI听懂你的潜台词。</li></ul><hr><p><strong>🎯【谁需要这本手册？】</strong></p><ul><li><strong>学生党</strong>：论文降重、解题思路、语言学习，作业效率飙升；</li><li><strong>打工人</strong>：周报生成、会议纪要、PPT大纲，告别熬夜加班；</li><li><strong>创作者</strong>：短视频脚本、小说大纲、爆款标题，灵感永不枯竭；</li><li><strong>开发者</strong>：代码生成、BUG修复、文档整理，开发周期缩短。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的遍历框架</title>
      <link href="/2020/04/24/shu-de-bian-li-kuang-jia/"/>
      <url>/2020/04/24/shu-de-bian-li-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="一般框架："><a href="#一般框架：" class="headerlink" title="一般框架："></a>一般框架：</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// root 需要做什么？在这做。</span>    <span class="token comment">// 其他的不用 root 操心，抛给框架</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二叉搜索树框架"><a href="#二叉搜索树框架" class="headerlink" title="二叉搜索树框架"></a>二叉搜索树框架</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">BST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> target<span class="token punctuation">)</span>        <span class="token comment">// 找到目标，做点什么</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>         <span class="token function">BST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> target<span class="token punctuation">)</span>        <span class="token function">BST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二叉树设计总路线："><a href="#二叉树设计总路线：" class="headerlink" title="二叉树设计总路线："></a>二叉树设计总路线：</h2><ol><li>二叉树算法设计的总路线：把当前节点要做的事做好，其他的交给递归框架，不用当前节点操心。</li><li>如果当前节点会对下面的子节点有整体影响，可以通过辅助函数增长参数列表，借助参数传递信息。</li></ol><h3 id="例题1：判断是否是一个BST-有些时候直接写不出来需要使用辅助函数，添加参数列表传递信息"><a href="#例题1：判断是否是一个BST-有些时候直接写不出来需要使用辅助函数，添加参数列表传递信息" class="headerlink" title="例题1：判断是否是一个BST,有些时候直接写不出来需要使用辅助函数，添加参数列表传递信息"></a>例题1：判断是否是一个BST,有些时候直接写不出来需要使用辅助函数，添加参数列表传递信息</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> min<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> min<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> max<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> min<span class="token punctuation">,</span> root<span class="token punctuation">)</span>         <span class="token operator">&amp;&amp;</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="例题2：判断是否有某个数字"><a href="#例题2：判断是否有某个数字" class="headerlink" title="例题2：判断是否有某个数字"></a>例题2：判断是否有某个数字</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isInBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> target<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token function">isInBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> target<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">isInBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// root 该做的事做完了，顺带把框架也完成了，妙</span><span class="token punctuation">}</span></code></pre><h3 id="例题3：在BST中插入一个数字"><a href="#例题3：在BST中插入一个数字" class="headerlink" title="例题3：在BST中插入一个数字"></a>例题3：在BST中插入一个数字</h3><p>对数据结构的操作无非遍历 + 访问，遍历就是“找”，访问就是“改”。具体到这个问题，插入一个数，就是先找到插入位置，然后进行插入操作。<br>BST 中的遍历框架，就是“找”的问题。直接套框架，加上“改”的操作即可。一旦涉及“改”，函数就要返回 TreeNode 类型，并且对递归调用的返回值进行接收。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 找到空位置插入新节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// if (root.val == val)</span>    <span class="token comment">//     BST 中一般不会插入已存在元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span>         root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> val<span class="token punctuation">)</span>         root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="例题4：在BST中删除一个数字"><a href="#例题4：在BST中删除一个数字" class="headerlink" title="例题4：在BST中删除一个数字"></a>例题4：在BST中删除一个数字</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 这两个 if 把情况 1 和 2 都正确处理了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">// 处理情况 3</span>        <span class="token class-name">TreeNode</span> minNode <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>val <span class="token operator">=</span> minNode<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> minNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">TreeNode</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// BST 最左边的就是最小的</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现LRU算法</title>
      <link href="/2020/04/24/java-shi-xian-lru-suan-fa/"/>
      <url>/2020/04/24/java-shi-xian-lru-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是LRU算法"><a href="#什么是LRU算法" class="headerlink" title="什么是LRU算法"></a>什么是LRU算法</h2><p>LRU是Least Recently Used的缩写，即最近最少使用，常用于页面置换算法，为虚拟页式存储管理服务。LRU算法的提出，是基于这样一个事实：在前面几条指令中使用频繁的页面很可能在后面的几条指令中频繁使用。反过来说，已经很久没有使用的页面很可能在未来较长的一段时间内不会被用到。这个，就是著名的局部性原理。此外，LRU算法也经常被用作缓存淘汰策略。本文将基于LRU算法的思想，使用Java语言实现一个我们自己的缓存工具类。</p><h2 id="算法思想："><a href="#算法思想：" class="headerlink" title="算法思想："></a>算法思想：</h2><ol><li>新数据插入到链表头部；</li><li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部；</li><li>当链表满的时候，将链表尾部的数据丢弃。</li></ol><h2 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h2><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001802688.png"></p><h2 id="思考节点的结构为什么要有key-val-一般不是只有val吗"><a href="#思考节点的结构为什么要有key-val-一般不是只有val吗" class="headerlink" title="思考节点的结构为什么要有key val(一般不是只有val吗)"></a>思考节点的结构为什么要有key val(一般不是只有val吗)</h2><p>移除尾部节点的时候需要根据节点的key来删除映射关系（key——&gt;node）</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>    <span class="token comment">// 双向链表节点定义</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> key<span class="token punctuation">;</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token class-name">Node</span> prev<span class="token punctuation">;</span>        <span class="token class-name">Node</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//模拟缓存容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment">//保存链表的头节点和尾节点</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> first<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> last<span class="token punctuation">;</span>    <span class="token comment">//从key到node映射的map</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//为空返回-1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//先看看是否已经存在</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//不存在创建节点，然后判断缓存是否满了，如果满了删除最后一个节点。然后将新节点放到链表头部，增加一个映射关系</span>            <span class="token comment">//存在则直接覆盖，然后移动到头部</span>            node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">addToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">moveToHead</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//要修改很多指针</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//如果是最后一个节点，将最后一个节点的next指针置为空，然后last指向前一个节点</span>            last<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> last<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//如果是中间节点，中间节点的前节点的后指针  指向 中间节点的后节点</span>            <span class="token comment">//中间节点的后节点的前指针 指向 中间节点的前节点</span>            node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//把该节点作为头结点</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> first<span class="token punctuation">.</span>prev<span class="token punctuation">;</span><span class="token comment">// 写成node.prev = null;更好理解</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>        first <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addToHead</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> node<span class="token punctuation">;</span>            last <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//把新节点作为头结点</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>            first<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>            first <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>last<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> prevNode <span class="token operator">=</span> last<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token comment">//修改last所指的位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            prevNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> prevNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LRUCache</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//【1】左边是最近使用的</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//【2，1】</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//【3，2，1】</span>        cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//【1，3，2】</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//【4，1，3】</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺时针打印矩阵</title>
      <link href="/2020/04/24/shun-shi-zhen-da-yin-ju-zhen/"/>
      <url>/2020/04/24/shun-shi-zhen-da-yin-ju-zhen/</url>
      
        <content type="html"><![CDATA[<p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001637786.png"></p><p>解题思路：<br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001654144.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//x代表结构数组的下标</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//从左到右，先保存再  向下收缩（++t），判断是否打印完</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>x<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// left to right.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>t <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">//从上到下，先保存再  想左收缩（--r），判断是否打印完</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> t<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>x<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// top to bottom.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token operator">--</span>r<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">//从右到左，先保存再  向上收缩(--b)，判断是否打印完</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> l<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>x<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// right to left.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&gt;</span> <span class="token operator">--</span>b<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">//从下到上，先保存再  向右收缩(++l)，判断是否打印完</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>x<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// bottom to top.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>l <span class="token operator">&gt;</span> r<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>res[x++] 等价于先给 res[x] 赋值，再给 x 自增 1 ；</li><li>++t &gt; b 等价于先给 t 自增 1 ，再判断 t &gt; b 逻辑表达式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包含min函数的栈</title>
      <link href="/2020/04/24/bao-han-min-han-shu-de-zhan/"/>
      <url>/2020/04/24/bao-han-min-han-shu-de-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001032792.png"></p><h2 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h2><p>维护一个辅助栈，让辅助栈的栈顶始终是最小值</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//如果添加的时候元素比辅助栈的栈顶元素小，就顺便也把元素添加到辅助栈</span>        <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span>            <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//如果弹出的是最小值，则把辅助栈的栈顶页弹出</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h2><p>如果当前压入的值比当前最小值，则压入一个当前最小值，再压入当前的值！</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    <span class="token comment">/** initialize your data structure here. */</span>    <span class="token keyword">public</span> <span class="token class-name">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//先压先前最小值</span>        <span class="token comment">//再压一个当前最小值，保证最小值一直存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> min<span class="token punctuation">)</span><span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>            min <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> min<span class="token punctuation">)</span><span class="token punctuation">{</span>            min <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//如果相等一共弹出了俩次，不相等弹出一次</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> min<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的压入弹出序列</title>
      <link href="/2020/04/24/zhan-de-ya-ru-dan-chu-xu-lie/"/>
      <url>/2020/04/24/zhan-de-ya-ru-dan-chu-xu-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001747717.png"></p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ol><li>使用一个栈，开始为空</li><li>持续压入pushed数组元素到栈中，直到栈顶元素和popped首元素相同，开始弹出，若弹出后还是匹配，继续弹出</li><li>最后判断栈是否为空，空则true，否则false</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="language-none"><code class="language-none">public boolean validateStackSequences(int[] pushed, int[] popped) {       Stack&lt;Integer&gt; stack = new Stack();       int j = 0;       for (int elem : pushed) {           stack.push(elem);           while (j &lt; popped.length &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek() == popped[j]) {               stack.pop();               j++;           }       }       return j == popped.length;   }</code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从上到下打印二叉树II</title>
      <link href="/2020/04/24/cong-shang-dao-xia-da-yin-er-cha-shu-ii/"/>
      <url>/2020/04/24/cong-shang-dao-xia-da-yin-er-cha-shu-ii/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001202748.png"></p><h2 id="题解1："><a href="#题解1：" class="headerlink" title="题解1："></a>题解1：</h2><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001212728.png" alt="image-20250221001212728"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="题解2："><a href="#题解2：" class="headerlink" title="题解2："></a>题解2：</h2><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001243211.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从上到下打印二叉树 I</title>
      <link href="/2020/04/24/cong-shang-dao-xia-da-yin-er-cha-shu-i/"/>
      <url>/2020/04/24/cong-shang-dao-xia-da-yin-er-cha-shu-i/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001111317.png"></p><h2 id="题解1："><a href="#题解1：" class="headerlink" title="题解1："></a>题解1：</h2><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001132865.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口回调解析</title>
      <link href="/2020/04/24/jie-kou-hui-diao-jie-xi/"/>
      <url>/2020/04/24/jie-kou-hui-diao-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么会有接口回调？什么是接口回调？"><a href="#为什么会有接口回调？什么是接口回调？" class="headerlink" title="为什么会有接口回调？什么是接口回调？"></a>为什么会有接口回调？什么是接口回调？</h2><p>其实这两个问题是一个问题，知道了接口回调的原理自然就知道了为什么会有这么个东西。我们知道java中接口是不可以直接创建实例的，那么问题来了，假如我把一个接口声明为一个变量，那么我执行这个接口中的方法，接口没有实例它该怎么办呢？啊哈，这里自然又改出现java中的另一个特性—“多态”，这时java虚拟机自然会去找其子类，调用其子类中已经重载的该方法，这里就是接口回调的本质！！<br>我们在网络请求等耗时的操作的时候会使用到该机制，用来把得到的数据传回主线程中。</p><h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><p>比如我写一个工具，下载任务，下载任务可能成功，可能失败。为了解耦，我的这个下载工具类只能专门用来下载，如何处理成功和失败，这个就交给调用方来完成。</p><h3 id="回调接口的接口声明："><a href="#回调接口的接口声明：" class="headerlink" title="回调接口的接口声明："></a>回调接口的接口声明：</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @描述： 结果回调 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResultCallback</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>下载工具类，定义回调接口变量,并在代码中调用接口的方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @描述： 下载任务 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Download</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ResultCallback</span> callback<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Download</span><span class="token punctuation">(</span><span class="token class-name">ResultCallback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">excuteDownload</span><span class="token punctuation">(</span><span class="token class-name">String</span> usrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">HttpURLConnection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>usrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    conn<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    conn<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//做些什么</span>                    callback<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//thing's done callback</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    callback<span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// thing's error  callback</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="调用方：创建下载类对象，因为下载类的构造函数里有回调接口类，不能实例化，所以你需要实现该接口"><a href="#调用方：创建下载类对象，因为下载类的构造函数里有回调接口类，不能实例化，所以你需要实现该接口" class="headerlink" title="调用方：创建下载类对象，因为下载类的构造函数里有回调接口类，不能实例化，所以你需要实现该接口"></a>调用方：创建下载类对象，因为下载类的构造函数里有回调接口类，不能实例化，所以你需要实现该接口</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Download</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResultCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">//下载完后做一些事</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">//do something when work is fail</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excuteDownload</span><span class="token punctuation">(</span><span class="token string">"your parameter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>接口回调，实际上是利用了java中的多态性，利用父亲引用指向子类的地址，从而实现父亲接口调用子类实现类的方法。接口回调是设计模式的解耦核心，可以说几乎所有的模式都用到了接口回调。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从上到下打印二叉树 III</title>
      <link href="/2020/04/24/shu-zu-zhong-chong-fu-de-shu-zi/"/>
      <url>/2020/04/24/shu-zu-zhong-chong-fu-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001320211.png"></p><h2 id="题解1：基于上一题的递归，给递归函数再加一个变量，代表从左往右还是从右往左"><a href="#题解1：基于上一题的递归，给递归函数再加一个变量，代表从左往右还是从右往左" class="headerlink" title="题解1：基于上一题的递归，给递归函数再加一个变量，代表从左往右还是从右往左"></a>题解1：基于上一题的递归，给递归函数再加一个变量，代表从左往右还是从右往左</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> node<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//flag=1表示从左到右</span>        <span class="token function">lei</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lei</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>k<span class="token punctuation">)</span>node<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                node<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                node<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>            <span class="token function">lei</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">lei</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="题解2：层序遍历加倒序"><a href="#题解2：层序遍历加倒序" class="headerlink" title="题解2：层序遍历加倒序"></a>题解2：层序遍历加倒序</h2><p><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001345446.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="题解3：双端队列"><a href="#题解3：双端队列" class="headerlink" title="题解3：双端队列"></a>题解3：双端队列</h2><p>法2优缺点：<br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221001525182.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> deque<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 打印奇数层</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 从左向右打印</span>                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 先左后右加入下层节点</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">// 打印偶数层</span>            tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 从右向左打印</span>                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 先右后左加入下层节点</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> deque<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> deque<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>链接：<a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/solution/mian-shi-ti-32-iii-cong-shang-dao-xia-da-yin-er--3/">https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/solution/mian-shi-ti-32-iii-cong-shang-dao-xia-da-yin-er--3/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优先级队列</title>
      <link href="/2020/04/23/you-xian-ji-dui-lie/"/>
      <url>/2020/04/23/you-xian-ji-dui-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="优先级队列使用二叉堆实现的"><a href="#优先级队列使用二叉堆实现的" class="headerlink" title="优先级队列使用二叉堆实现的"></a>优先级队列使用二叉堆实现的</h2><p>插入元素和删除队列中最大的元素时间复杂度都是O(logn),因为这俩个操作是基于二叉堆的上浮和下沉操作实现的</p><h2 id="二叉堆是什么？"><a href="#二叉堆是什么？" class="headerlink" title="二叉堆是什么？"></a>二叉堆是什么？</h2><p>二叉堆逻辑结构是完全二叉树，存储结构是数组</p><h2 id="二叉堆是怎么存的呢？"><a href="#二叉堆是怎么存的呢？" class="headerlink" title="二叉堆是怎么存的呢？"></a>二叉堆是怎么存的呢？</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 父节点的索引</span><span class="token keyword">int</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 左孩子的索引</span><span class="token keyword">int</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 右孩子的索引</span><span class="token keyword">int</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如图：数组索引0的位置专门置空<br><img src="https://greatsawyer.github.io/imgRepo/img/image-20250221002715390.png"></p><h2 id="优先级队列的实现"><a href="#优先级队列的实现" class="headerlink" title="优先级队列的实现"></a>优先级队列的实现</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MaxPQ</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pq<span class="token punctuation">;</span>    <span class="token comment">// 当前 Priority Queue 中的元素个数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MaxPQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 索引 0 不用，所以多分配一个空间</span>        pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>cap <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MaxPQ</span> pq<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MaxPQ</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span>        pq<span class="token punctuation">.</span><span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>        pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 返回当前队列中最大元素 */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 插入元素 e */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 先把新元素加到最后</span>        pq<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token comment">// 然后让它上浮到正确的位置</span>        <span class="token function">swim</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 删除并返回当前队列中最大元素 */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 最大堆的堆顶就是最大元素</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> pq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 把这个最大元素换到最后，删除之</span>        <span class="token function">exch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">N</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment">// 让 pq[1] 下沉到正确位置</span>        <span class="token function">sink</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 上浮第 k 个元素，以维护最大堆性质 */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果浮到堆顶，就不能再上浮了</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span><span class="token function">parent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果第 k 个元素比上层大</span>            <span class="token comment">// 将 k 换上去</span>            <span class="token function">exch</span><span class="token punctuation">(</span><span class="token function">parent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> <span class="token function">parent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 下沉第 k 个元素，以维护最大堆性质 */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果沉到堆底，就沉不下去了</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">left</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 先假设左边节点较大</span>            <span class="token keyword">int</span> older <span class="token operator">=</span> <span class="token function">left</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果右边节点存在，比一下大小</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">right</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token class-name">N</span> <span class="token operator">&amp;&amp;</span> <span class="token function">less</span><span class="token punctuation">(</span>older<span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                older <span class="token operator">=</span> <span class="token function">right</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 结点 k 比俩孩子都大，就不必下沉了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span>older<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">// 否则，不符合最大堆的结构，下沉 k 结点</span>            <span class="token function">exch</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> older<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> older<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 交换数组的两个元素 */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* pq[i] 是否比 pq[j] 小？ */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">less</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pq<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 父节点的索引</span>    <span class="token keyword">int</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 左孩子的索引</span>    <span class="token keyword">int</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 右孩子的索引</span>    <span class="token keyword">int</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>二叉堆就是一种完全二叉树，所以适合存储在数组中，而且二叉堆拥有一些特殊性质。</p></li><li><p>二叉堆的操作很简单，主要就是上浮和下沉，来维护堆的性质（堆有序），核心代码也就十行。</p></li><li><p>优先级队列是基于二叉堆实现的，主要操作是插入和删除。插入是先插到最后，然后上浮到正确位置；删除是调换位置后再删除，然后下沉到正确位置。核心代码也就十行。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
